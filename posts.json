[
  {
    "type_of": "article",
    "id": 1045143,
    "title": "Hackathon submission - Idea: Group dynamics analysis",
    "description": "Introduction   Well, this is my third submission for this hackathon. I guess Automatic...",
    "published": true,
    "published_at": "2022-04-08T10:45:55.464Z",
    "slug": "hackathon-submission-idea-group-dynamics-analysis-13dd",
    "path": "/miguelmj/hackathon-submission-idea-group-dynamics-analysis-13dd",
    "url": "https://dev.to/miguelmj/hackathon-submission-idea-group-dynamics-analysis-13dd",
    "comments_count": 2,
    "public_reactions_count": 10,
    "page_views_count": 76,
    "published_timestamp": "2022-04-08T10:45:55Z",
    "body_markdown": "---\ncover_image: https://images.pexels.com/photos/7095/people-coffee-notes-tea.jpg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\n---\n### Introduction\n\nWell, this is my third submission for this hackathon. I guess Automatic Speech Recognition (ASR) really inspired me. This time I'm participating in the **Innovative Ideas** challenge because I don't know if I'll have time to program anything else and I prefer just to write.\n\nNatural Language Processing (NLP) and conversational interfaces are one of my favorite topics in technology. That's why I've tried to find interesting use cases for ASR, more than just plain transcription functionalities, which is just a little part of what Deepgram provides. I was surprised to discover how easily you could get other useful data like timing (timestamps of start and end of words) and source recognition (differentiate speakers). We know there's a lot of useful information in speech and I think that's the main reason I've felt so inspired. I'll write more in depth about my thought process behind each submission in the next and final post of this series.\n\n### My Deepgram Use-Case\n\nFor a long time, I've been interested in **group dynamics**. We all know from experience that each person feels more motivated to participate in different groups or to talk about certain topics. I think it's important to observe the behavior of each speaker and their reactions in different situations in order to create more comfortable and productive conversations in the future.\n\nSo one possible use case for Deepgram and ASR technology could be to analyze recordings of meetings to extract **useful information about the dynamics of a group**.\n\n_What topic makes the quiet one speak more? What kind of words prevent interruptions? What topics are more polemic to certain people?_\n\nThis kind of analysis would be useful in cases like work meetings, community moderation and even psychology experiments.\n\n### Dive into Details\n#### Technical approach\n##### Get the data\n- First of all, the program would use Deepgram to **get the punctuated and diarized transcription**, with additional information about the utterances.\n\n##### Enrich the data\n- From that information, it would **reconstruct the conversation**, separating the intervention of each speaker, counting the number of utterances and also the time separating each one. It might be interesting also to mark profanity.\n- Now we could find anomalies in the time separating interventions to **detect possible interruptions** or long silences.\n- Then, it might be necessary to make several runs of LDA (Latent Dirichlet Distribution) to **find the topics** treated in the conversation, when they change, who brings them, etc.\n- Similarly, it would run several **sentiment analyses** by topic, by person, by intervention and of course a general one.\n\n##### Summarize and present the data\n- With some probabilistic analysis, it could be possible to estimate **correlation** with interruptions, silences, topics, topic changes, people, sentiments, etc. _I would propose either a Bayesian network or a Rule discovery algorithm, like Apriori_.\n- Finally, the program would make a **summary of the interventions of each person**. Some possible data to extract would be:\n    - Time spent speaking\n    - Topics where they intervene more/less.\n    - Who speaks usually before or after them.\n    - Sentiment correlation with topics and other people.\n    - Most repeated words.\n    - Exceptional words. By this I mean relevant words that nobody else said or that has little relation with the topics of the conversation... You never know if you'll learn something important about that speaker.\n\n#### Application\n\nOne of the first things I realized was that this wouldn't be of much use in controlled environments, like interviews. The interest comes from **natural dynamics that arise from the interaction between individuals** when discussing everyday topics.\n\nSo one clear context where this could be useful would be work meetings, that can be recorded and analyzed. However, I feel like recording conversations in other settings is somewhat intrusive, so I can't actually propose specific, additional use cases. As I said before, maybe use it with event recordings for community moderation and somehow in psychology experiments... **I'm interested in what's your opinion and what case can you come up with**.\n\n_Edit:_ I've been told that there's an interesting use case, related to studying cultural differences. There are cultures where an interruption meant to express agreement is considered polite, while in others the convention is to leave seconds of silence between interventions. I guess that another application would be to study **group dynamics in multicultural groups**. \n\n### Conclusion\n\nI've had real fun thinking and working on this hackathon, so thanks a lot to Deepgram and DEV for organizing it. As I said at the beginning, I've felt really inspired and I'm sure I'll work further with the projects born from it. I'll soon post the last post of this series, \n<!-- [Note]: # (Any thoughts or takeaways about what you've learned from participating in Deepgram Hackathon “Innovative Ideas” challenge can go here! If you're planning on writing a series of posts for the Hackathon, consider teasing your next post.) -->\n\n\n",
    "positive_reactions_count": 10,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--37zj6D65--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://images.pexels.com/photos/7095/people-coffee-notes-tea.jpg%3Fauto%3Dcompress%26cs%3Dtinysrgb%26w%3D1260%26h%3D750%26dpr%3D1",
    "tag_list": [
      "hackwithdg"
    ],
    "canonical_url": "https://dev.to/miguelmj/hackathon-submission-idea-group-dynamics-analysis-13dd",
    "reading_time_minutes": 3,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 1042720,
    "title": "Hackathon submission - Interactive conversation scripts for language learning",
    "description": "Overview of My Submission   My second submission consists on a tool designed for languages...",
    "published": true,
    "published_at": "2022-04-03T10:35:18.162Z",
    "slug": "hackathon-submission-interactive-conversation-scripts-for-language-learning-110c",
    "path": "/miguelmj/hackathon-submission-interactive-conversation-scripts-for-language-learning-110c",
    "url": "https://dev.to/miguelmj/hackathon-submission-interactive-conversation-scripts-for-language-learning-110c",
    "comments_count": 0,
    "public_reactions_count": 7,
    "page_views_count": 127,
    "published_timestamp": "2022-04-03T10:35:18Z",
    "body_markdown": "---\ncover_image: https://images.pexels.com/photos/7140432/pexels-photo-7140432.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\n---\n\n## Overview of My Submission\nMy second submission consists on a tool designed for languages teachers and students. Audios with recorded conversations are a common and good resource in language lessons, so I thought it would be useful not only to have a transcription to read while you listen, but also make them interactive to show phrase by phrase translations and to quickly navigate the audio to listen again certain part of the conversation.\n\n> Cover image by [Julia Filirovska](https://www.pexels.com/@filirovska/) from Pexels\n\n## Submission Category\nAccessibility Advocates\nWacky Wildcards\n\n## Link to Code on GitHub\n\n{% embed https://github.com/MiguelMJ/Scripter %}\n\n## Additional Resources / Info\n\nThis time I reused most of the code from my previous submission. In that one I forgot to tell a bit of background, so as most of the code is the same, I will do it here.\n\nIn spite of using Python for the program, I didn't want to use the Deepgram SDK. I know other participants have done the same; in my case, it's just because I'm used to making HTTP requests for lots of things, so I chose not to add more dependencies to the application. I felt that the Deepgram API is accesible enough for me.\n\nI've once more used another API: LibreTranslate. This time, the difference is that LibreTranslate is a open source API, so there are different available mirrors, and you can even set up one yourself, so I allowed the user to specify which one to use with a `-H|--host` parameter and made a quick guide on it on the README.\n\nI'm not actually a webdev person, so the resultant HTML file might not be very polished, but I thought is more than enough for a prototype. I learned to use the `<audio>` element of HTML5 and manipulate it via JS, which is nice. Thanks to it and the rich information returned by the Deepgram API, the interactive scripts have the following features:\n\n- The audio is embedded in the HTML file, so it can be played directly from there (as long as the path of the source audio doesn't change).\n- Each sentence of the audio is printed in a different color, according to who is the speaker.\n- If you hover over a sentence, the translation to your language (if supported) appears.\n- If you click on a sentence, the audio plays only the sentence you clicked on, making it more easy to replay specific parts of the audio.\n\nHere's a little demonstration on this features.\n\n{% embed https://youtu.be/RYa6a9MX8-U %}\n\nI recorded a short, sample conversation with my sister, who also provided the voice recorder. Some notes:\n- The translation on hover is not immediate because it uses the `title` HTML attribute, that has a little delay.\n- If you speak Spanish (or have a good ear) you'll notice that for the 4th intervention, it doesn't notice that it's a question, so both the transcription and the translation are wrong. That's what happens with automation!\n\nIn any case, I think it's neat and even those little mistakes made by the audio recognition and translation can be manually fixed by the teacher, and most of the work would be automatic.\n\n### Possible future improvements\n- Allow usage of output templates.\n- Add some tool for easy manual fixes.\n- Enable more flexibility on the options to use different services, if the user wants to.\n\n\n***\n\nI hope you like it! And if you are a language teacher or student, feel free to use it and please, give me some feedback!\n",
    "positive_reactions_count": 7,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--KB-VAwWG--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://images.pexels.com/photos/7140432/pexels-photo-7140432.jpeg%3Fauto%3Dcompress%26cs%3Dtinysrgb%26w%3D1260%26h%3D750%26dpr%3D1",
    "tag_list": [
      "hackwithdg",
      "showdev",
      "python",
      "opensource"
    ],
    "canonical_url": "https://dev.to/miguelmj/hackathon-submission-interactive-conversation-scripts-for-language-learning-110c",
    "reading_time_minutes": 3,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    },
    "flare_tag": {
      "name": "showdev",
      "bg_color_hex": "#091b47",
      "text_color_hex": "#b2ffe1"
    }
  },
  {
    "type_of": "article",
    "id": 1029859,
    "title": "Hackathon submission - An audio search engine powered by Deepgram",
    "description": "Overview of My Submission   This submission consists on a CLI application to search for a...",
    "published": true,
    "published_at": "2022-03-28T09:27:42.868Z",
    "slug": "hackathon-submission-an-audio-search-engine-powered-by-deepgram-3cf",
    "path": "/miguelmj/hackathon-submission-an-audio-search-engine-powered-by-deepgram-3cf",
    "url": "https://dev.to/miguelmj/hackathon-submission-an-audio-search-engine-powered-by-deepgram-3cf",
    "comments_count": 4,
    "public_reactions_count": 12,
    "page_views_count": 154,
    "published_timestamp": "2022-03-28T09:27:42Z",
    "body_markdown": "---\ncover_image: https://images.pexels.com/photos/3109168/pexels-photo-3109168.jpeg?auto=compress&cs=tinysrgb&dpr=3&h=750&w=1260\n---\n\n### Overview of My Submission\n\nThis submission consists on a CLI application to search for a word (whole or partial) among several audio sources, including Telegram chats.\n\nOur conversations are stored in chats in all kinds of instant messaging services. How many questions, declarations, confessions, apologies, reminders and decisions have been interchanged today in text format? However, this conversations are constantly being mixed with voicemails. It is faster to talk than to write and also our brains understand much better the emotion of a message when we hear it spoken out. And yet, when we want to search for past messages, using the search option in our chats, only the text is considered. Audio is left aside, in a secondary place, but it should be actually as important.\n\n> Cover image by [Wallace Chuck](https://www.pexels.com/@chuck) from pexels\n\n### Submission Category: \n\nAnalytics Ambassadors\nWacky Wildcards\n\n### Link to Code on GitHub\n\n{% github https://github.com/MiguelMJ/AudioSearchEngine %}\n\n### Additional Resources / Info\n\n<!-- [Note:] # Screenshots/demo videos are encouraged! -->\n\nThe documentation of the project is in the repository's README.\n\nI like to make my programs as customizable as possible, so I use the `argparse` library to automatically parse the command line arguments and also build this nice help message.\n```\nusage: main.py [OPTIONS] TERM FILES...\n\nSearch engine for audios with support for several audio sources. Powered by Deepgram.\n\npositional arguments:\n  TERM                  Word to search\n  FILES                 Files to perform the search\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --no-ansi             Don't display color in the output\n  -L NUM, --log-level NUM\n                        log level. -1=quiet, 0=errors, 1=warnings, 2=info (default=2)\n  -C NUM, --context NUM\n                        number of words to surround the search hits in the output (default=2)\n  -W, --whole-word      search for whole words only\n  -o FILE, --output-file FILE\n                        file to store the results of the search in a JSON format\n\nDeepgram options:\n  --deepgram-api-key X  Deepgram API key. By default, get it from a file named deepgramApiKey\n  -P X=Y, --param X=Y   parameter for the Deepgram URL\n  -F, --ignore-cache    ignore cached transcriptions and force an API call\n\nTelegram options:\n  --telegram-api-id X   Telegram API key. By default, get it from a file named telegramApiId\n  --telegram-api-hash X\n                        Telegram API hash. By default, get it from a file named telegramApiHash\n  -T X, --telegram-chat X\n                        chat from Telegram to retreive messages from\n  -M NUM, --messages NUM\n                        number of messages to retreive while looking for audios in each Telegram chat(default=100)\n\nSource code: https://github.com/MiguelMJ/AudioSearchEngine\n```\n\nThis is an example execution to search among local files:\n\n![Example search among local files](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8gns0z5bs3r7kjobcrs.png)\n \nAnd this one, of an execution to search among the audios in the \"me\" chat in Telegram.\n\n![Example search among Telegram audios](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plptqzjkdckfh8q577yg.png)\n \nThe screenshot can't get all the output, but you get the idea.\n\nSome things to consider if you want to try it:\n- I've used the `-F` option for showcase purposes, you don't need to.\n- The default language is Spanish (my native language), so you probably will have to either change that little line of code or use the `-P language=X` argument.\n- All the logging is made to stderr, so you can safely pipe it to another command and only get the JSON output of the search.\n- The Telegram integration is optional, if you are only going to search among local files. But if you want to use it, you must install the `telethon` dependency and have the API id and API hash provided by Telegram.\n- In any case, a Deepgram API key is required.\n\n#### Possible future improvements\n\n- Add more remote audio sources, apart from Telegram chats (maybe Discord?).\n- Make the search process more flexible using an edit-distance based match, instead of only exact matches.\n- Allowing more complex queries: multiple words, regular expresions, etc.\n- If you can think of another one, feel free to make a PR!\n\n***\n\nIf you like the project think about contributing or giving it a star. I'm really excited to know what you think. Let me know in the comments!",
    "positive_reactions_count": 12,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--oFL1UKYG--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://images.pexels.com/photos/3109168/pexels-photo-3109168.jpeg%3Fauto%3Dcompress%26cs%3Dtinysrgb%26dpr%3D3%26h%3D750%26w%3D1260",
    "tag_list": [
      "hackwithdg",
      "telegram",
      "showdev",
      "python"
    ],
    "canonical_url": "https://dev.to/miguelmj/hackathon-submission-an-audio-search-engine-powered-by-deepgram-3cf",
    "reading_time_minutes": 3,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    },
    "flare_tag": {
      "name": "showdev",
      "bg_color_hex": "#091b47",
      "text_color_hex": "#b2ffe1"
    }
  },
  {
    "type_of": "article",
    "id": 973793,
    "title": "How to get answers on StackOverflow",
    "description": "Talking about Questions And Answers in software development is talking about stackoverflow.com (SO...",
    "published": true,
    "published_at": "2022-02-06T18:42:54.299Z",
    "slug": "how-to-get-answers-on-stackoverflow-3pp7",
    "path": "/miguelmj/how-to-get-answers-on-stackoverflow-3pp7",
    "url": "https://dev.to/miguelmj/how-to-get-answers-on-stackoverflow-3pp7",
    "comments_count": 17,
    "public_reactions_count": 37,
    "page_views_count": 587,
    "published_timestamp": "2022-02-06T18:42:54Z",
    "body_markdown": "Talking about Questions And Answers in software development is talking about stackoverflow.com (SO from now on). There's a bad experience shared among many beginners in this site and that's a shame. Instead of taking a gatekeeping attitude, my intention here is to explain several common errors and misconceptions that lead to this bad experience in SO and how to avoid them to get the most out of that great community.\n\n> Cover foto from pexels.com\n\n## First of all: read the community guidelines\n\nIf you're an experienced user and have read/heard any rant about stack overflow you'll instantly notice that most of the problems people have could be solved if they just read the guidelines.\n\nThere is a badge in SO that you get **only by reading the [tour page](https://stackoverflow.com/tour)**:\n\n![Informed badge](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8xzppryf7v4259c1wx2.png) \n\nSo when I'm answering questions, this is a red flag for me:\n\n![User without badges](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f2nze608arv3woxzhu7p.png)\n \nThis user hasn't got a single badge, which means **they haven't even made the effort to read the tour page**. Unless the title of the question suggests that it really is interesting, the most probable thing is that the question doesn't comply the community guidelines. **Most people don't want to spend their time on this kind of questions**.\n\nGo and get the badge! Read: [Tour - Stack Overflow](https://stackoverflow.com/tour)\n\nAnd also one of the most linked pages in the comments of unanswered questions: [How do I ask a good question? - Help Center - Stack Overflow](https://stackoverflow.com/help/how-to-ask)\n\nActually, a part of what I say here is also written there. This is my attempt to bring this to those in DEV that might have not heard of it.\n\n## Make sure that your question belongs in SO\n\nSO is a place for asking programming questions. You have a problem with your code? Go to SO. **But code is a very particular topic**. There are many others questions related to software that don't belong there, so if you post one, people will want you to remove it. \n\nThere are other Stack Exchange sites that you can use, where your question might be better received; take a look at the list of stack exchange sites to see where is the best place to ask: [All Sites - Stack Exchange](https://stackexchange.com/sites?view=list#technology-traffic)\n\n## Do your own research first\n\nNobody wants to answer the same question over and over again for each new user. Before posting your question, look up if someone has had your problem before. It will surprise you how hard it is to ask an original question.\n\nIf the answer to your question is one search away, then don't post it. It's very bad taste to make others google your problems for you.\n\n![S.O. search](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dl7l27msruv0tex3r1hb.png)\n\n### If someone marks your question as duplicate\nThere are two possible cases:\n\n- **Your question is actually a duplicate**: then don't take it personal. The site wants to remain as clean as possible and duplicate questions are just noise. Remove the question and upvote the existing one.\n\n- **Your question is not a duplicate of the proposed question**: then kindly explain why the other question is not useful for you, what are the differences in your case and what information do you lack.\n\n## Stack Overflow is not a coding service\n\nNo one charges money for answering questions. But there you have people with full time jobs, people with years of experience and people just like you, trying to gain some experience. We are all trying to help each other and learn, so if you copy-paste the statement of your latest assignment and expect someone to post the solution for you, people will find it disrespectful.\n\nIt is not bad to ask questions about your homework, but make sure you have tried to understand what they require you to do, conduct your own research first and make a question when you have specific aspects that you need help with; those would make a valid question.\n\nMore on this topic here: [How do I ask and answer homework questions? - Meta Stack Overflow](https://meta.stackoverflow.com/questions/334822/how-do-i-ask-and-answer-homework-questions)\n\n## Do some debugging, reduce the scope\n\nA lot of questions contain just a wall of code with the caption: *\"What's wrong?\"*. This kind of questions usually ask you to do an effort that the person asking could perfectly do: debug.\n\nThis is a crucial step that you can take before posting that will make it easier for people to answer and help you:\n- Try to find what part of the code produces the error. Post only the code relevant to the problem. Understanding other people's code is always hard, so reduce the effort required all you can.\n\nThis is not easy to do with every technology but it is possible in most cases.\n\nHowever, avoiding walls of code doesn't mean to ask without giving any details. It is much more difficult for anyone to help you without any readable and reproducible source.\n\nMore on this here: [How to create a Minimal, Reproducible Example - Help Center - Stack Overflow](https://stackoverflow.com/help/minimal-reproducible-example).\n\n## Use the correct tags\n\nRead the description of the tags before asking and try to use the ones you need. The correct tags will give your question visibility but will make sense in the context of the question. A common example: using C and C++ tags in a C++ only question.\n\n## Don't assume an offense\n\nIf they suggest or ask something in the comments of your question, don't be rude. I've seen new users answering comments with a horrible entitled attitude and I immediately lose the will to help them. Remember you are asking for help, not demanding results.\n\n***\n\n## Conclusion\n\n- If you ignore the community guidelines, a lot of people will do the same with your question.\n- If the question belongs to another community, they will tell you to remove it.\n- The ideal question looks like this:\n```\nI'm trying to do A\nMy approach is this one:\n(show relevant code, maybe cite your sources).\nBut I have B problem, \nso I've tried C and D\nbut it doesn't seem to work.\n```\n\nEven with these steps, there will always be people that don't behave well or will not understand the requirements of your problem, but this will happen in every self-moderated online community. However, in a knowledge-driven community like SO, that will be at least less likely to happen if you try to take this advice.\n\n***\n\nMy last tip: browse the feed of new questions for one week or two. If you only use Stack Overflow for reading answered questions and eventually asking yours, you might think that the community is very strict and closed. But when you receive day after day all those questions, you will start to see patterns and see how many users don't know how to properly ask for help, how many ask you something that is a DuckDuckGo/Google search away and that haven't even tried anything before asking. I know you can do better.\n\nI also know a lot of people here have resentment against SO. I hope this helps in some way to bring beginners closer to this community, without which software development would be completely different from what we know, and ease the experience of everyone involved. If you have any other tips or comments in this respect, I'll be happy to read them!",
    "positive_reactions_count": 37,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--EMQeg5Zi--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bmpukprxf3egk2vflbpd.jpg",
    "tag_list": [
      "beginners",
      "codenewbie",
      "productivity"
    ],
    "canonical_url": "https://dev.to/miguelmj/how-to-get-answers-on-stackoverflow-3pp7",
    "reading_time_minutes": 5,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 878591,
    "title": "Custom solution for fast navigation in Bash",
    "description": "Using the console, you have to cd your way through all your directories, which thanks to...",
    "published": true,
    "published_at": "2022-01-24T12:48:02.697Z",
    "slug": "custom-solution-for-fast-navigation-in-bash-12e1",
    "path": "/miguelmj/custom-solution-for-fast-navigation-in-bash-12e1",
    "url": "https://dev.to/miguelmj/custom-solution-for-fast-navigation-in-bash-12e1",
    "comments_count": 0,
    "public_reactions_count": 3,
    "page_views_count": 35,
    "published_timestamp": "2022-01-24T12:48:02Z",
    "body_markdown": "Using the console, you have to `cd` your way through all your directories, which thanks to autocompletion, can be a relatively fast. However, sometimes you have to work with very deep folder structures, with not autocompletion-friendly folder groups and processes that require you to navigate them a lot. As this has been my case for the last few months, I finally decided to make a tool to solve this and reduce the amount of keystrokes spent in `cd` navigation.\n\nThis tool is a small bash function called `ws`, short for *workspace*. You can find it [**here**](https://gist.github.com/MiguelMJ/b56f58d490826cddf8243672e6248aee). Paste it at the end of your `~/.bashrc` or your source file of choice to use it.\n\n## Description and usage\n\nFor `ws`, a workspaces is a set of directories, each one associated to a numeric ID. You can define as many workspaces as you want, and activate different ones for each open terminal.\n\nSome examples will be more illustrative than any wall of text:\n\n```bash\n# Create the workspace itself\n$ ws -s my_workspace\n\n# Populate it with directories\n$ cd /path/to/foo/dir\n$ ws -a\n$ cd /path/to/bar/dir\n$ ws -a\n$ cd /path/to/baz/dir\n$ ws -a\n\n# Check the directories in your workspace\n$ ws -l\nWorkspace my_workspace:\n  1 /path/to/foo/dir\n  2 /path/to/bar/dir\n  3 /path/to/baz/dir\n\n# Move to a directory in your workspace\n$ ws 2\n/path/to/bar\n\n# See a list of available workspaces\n# The active one is marked with >\n$ ws -s -l\nWorkspaces:\n- default\n> my_workspace\n\n# Remove a directory from a workspace\n$ ws -r 2\n$ ws -l\nWorkspace my_workspace:\n  1 /path/to/foo/dir\n  2 /path/to/baz/dir\n\n# Remove a workspace\n# If it is the current, then the default one is activated\n$ ws -s -r my_workspace\n$ ws -s -l\nWorkspaces:\n> default\n```\nThe only downside is that you'll have to remember the IDs of each directory to use it fluently, but this shouldn't be a problem if you end up using it a lot. Also, remember to check that you are using the correct workspace before you start to work; it will remember it if the `tty` is the same. \n\nTell me in the comments if you found it useful!\n\n***\n\n\n***Recommended reading***\n\n{% post https://dev.to/miguelmj/take-full-advantage-of-high-order-functions-examples-in-javascript-4ibg %}\n{% post https://dev.to/miguelmj/building-and-using-markov-chains-ai-for-text-generation-part-ii-1172 %}\n[You can follow me on Twitter! 🐦](https://twitter.com/MiguelMJdev)\n",
    "positive_reactions_count": 3,
    "cover_image": null,
    "tag_list": [
      "bash",
      "tutorial",
      "productivity",
      "linux"
    ],
    "canonical_url": "https://dev.to/miguelmj/custom-solution-for-fast-navigation-in-bash-12e1",
    "reading_time_minutes": 2,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 831313,
    "title": "Building and using Markov chains - AI for text generation - Part II",
    "description": "In the previous post we saw some theory behind Markov chains. In this one we're going to define the...",
    "published": true,
    "published_at": "2021-09-26T07:49:33.059Z",
    "slug": "building-and-using-markov-chains-ai-for-text-generation-part-ii-1172",
    "path": "/miguelmj/building-and-using-markov-chains-ai-for-text-generation-part-ii-1172",
    "url": "https://dev.to/miguelmj/building-and-using-markov-chains-ai-for-text-generation-part-ii-1172",
    "comments_count": 0,
    "public_reactions_count": 6,
    "page_views_count": 158,
    "published_timestamp": "2021-09-26T07:49:33Z",
    "body_markdown": "In the [previous post](https://dev.to/miguelmj/introduction-to-markov-chains-ai-for-text-generation-part-i-eha) we saw some theory behind Markov chains. In this one we're going to define the datastructures and the process involved in the creation and usage of one.\n\n> Cover phto by [Maria Orlova](https://www.pexels.com/es-es/@orlovamaria) on Pexels\n\n\n**Important**: Although some code chunks in this post might look like JS of Python, they are all just pseudo-code.\n\n## Data structures\nMarkov chains are directed graphs; the usual way to represent these is using an adjacency matrix. Each row will represent a word A and each column a word B; each cell will store the probability of B being the next word after A.\n\nSo if we had the following text: *\"How much wood would a woodchuck chuck if a woodchuck could chuck wood\"*, the matrix would like like this:\n\n| \\ | a | chuck | could | how | if | much | wood | woodchuck | would |\n|---|---|---|---|---|---|---|---|---|---|\n| **a**         | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 |\n| **chuck**     | 0 | 0 | 0 | 0 | 0.5 | 0 | 0.5 | 0 | 0 |\n| **could**     | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |\n| **how**       | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 |\n| **if**        | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |\n| **much**      | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 |\n| **wood**      | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |\n| **woodchuck** | 0 | 0.5 | 0.5 | 0 | 0 | 0 | 0 | 0 | 0 |\n| **would**     | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |\n\nDo you notice something special about this matrix? Most of its entries are zero! So instead of implementing a matrix as, for example, an array of arrays and waste a lot of space in zeroes, we should use a [sparse matrix](https://en.wikipedia.org/wiki/Sparse_matrix) implementation with a dictionary or tuples and lists. Something like this:\n\n```\n[\n(a, [(woodchuck, 1)]),\n(chuck, [(if, 0.5), (wood, 0.5)]),\n(could, [(chuck, 1)]),\n(how, [(much, 1)]),\n(if, [(a, 1)]),\n(much, [(wood, 1)]),\n(wood, [(would, 1)]),\n(woodchuck, [(chuck, 0.5), (could, 0.5)])\n(would, [(a, 1)])\n]\n```\nand finally, we could compress it even more if we tokenize the text, replacing words by code numbers. In this case, the tokens will be the positions in the sorted list of unique words(`a` is `1`, `chuck` is `2`, etc), like this:\n```\n[\n[(8, 1)],\n[(5, 0.5), (7, 0.5)],\n[(2, 1)],\n[(6, 1)],\n[(1, 1)],\n[(7, 1)],\n[(9, 1)],\n[(2, 0.5), (3, 0.5)],\n[(1, 1)]\n]\n```\nMuch better than the first matrix, right? Now let's see how we get the chain from the text\n\n## Building the chain\n\n### Preprocess the text\nThe first step consists on cleaning the text so we can get the more out of it. Some relevant steps here would be converting the whole text to lower case, expanding contractions and performing tokenization (replace words with their number of first appearance, for example). Steps like removing punctuation may be optional in this case, and other usual steps like lemmatization or removing stop words make no sense here.\n\nAn example of this would be:\n\n- Before preprocessing:\n  ```\n  I don't think Albert will come. I think he said he wouldn't.\n  ```\n- After expansion and conversion to lower case:\n  ```\n  i do not think albert will come. i think he said he would not.\n  ```\n- After tokenization, using the following regex to define tokens: `([^\\W_]+)|([,.;:?!]+)` (Tokens will be words, numbers and punctuation signs).\n  ```\n  token_dictionary = {\n    'i': 1,\n    'do': 2,\n    'not': 3,\n    'think': 4,\n    'albert': 5,\n    'will': 6,\n    'come': 7,\n    '.': 8,\n    'he': 9,\n    'said': 10,\n    'would': 11\n  }\n  tokenized_text = [-1, 1, 2, 3, 4, 5, 6, 7, 8, 1, 4, 9, 10, 9, 11, 3, -2]\n  ```\nWait, what are those `-1` and `-2` doing at the beginning and the end of the list? Well, they are special tokens reserved to mark just that: when a sentence starts and when it ends. They will be important when generating sentences with the chain.\n\n### Make a list of words and its followers\nNow that we have a list with the tokenized text, we have to iterate it storing the number of appearances of each word and the frequency that other words appear after it:\n\n```javascript\nbuild_markov(tokenized_text):\n    appearances = {}\n    matrix = {}\n    it = 1\n    while it < tokenized_text.length \n        current = tokenized_text[it - 1]\n        next = tokenized_text[it]\n\n        // EXISTING WORD\n        if current in appearances.keys\n            appearances[current]++\n            // EXISTING PAIR\n            if next in matrix[current].keys\n                matrix[current][next]++\n            // NEW PAIR\n            else\n                matrix[current] = {next: 1}\n    \n        // NEW WORD\n        else\n            appearances[current] = 1\n            matrix[current] = {next: 1}\n        it = it + 1\n    // FINALLY, NORMALIZE THE PROBABILITIES\n    for word in matrix.keys\n        for follower in matrix[word].keys\n            matrix[word][follower] = matrix[word][follower] / appearances[word]\n    return matrix\n```\nAnd your Markov chain would be ready to use!\n\n## Generating text from the chain\nNow, to generate the chain we will need a [roulette selection](https://en.wikipedia.org/wiki/Fitness_proportionate_selection) function to pick an element from a word-probability dictionary.\n\n```javascript\nroulette (words):\n    selection = random_number() // floating between 0 and 1\n    for candidate in words.keys\n        probability = words[candidate]\n        selection = selection - probability\n        if selection < 0\n            return candidate\n```\nAnd now, using that function we can use the Markov chain to generate a new word token given the previous:\n\n```javascript\ngenerate_next_token (matrix, token):\n    return roulette(matrix[token])\n```\nRemember the special tokens `-1` and `-2`? This is where they come handy. Using them we are able to make the function that generates a full sentence:\n```javascript\ngenerate_sentence_tokens (matrix):\n    tokens = [-1]\n    while tokens.last != -2\n        tokens.push(generate_next_token(matrix, token.last))\n    return tokens\n```\nFinally, we just have to translate back tokens to words, ignoring the first and the last ones. You might also want to do some postprocessing to put uppercase where is due and fix the whitespaces, for example before punctuation signs. I leave that to you.\n\n## Conclusion\nThe pseudo-code I've shown here works for a first order Markov chain. In the next posts, I will explain how to do a chain of order N and implement it in several languages. I hope you found this useful, please leave your thoughts in the comments!\n\n***\n\n***Recommended reading***\n{% post https://dev.to/miguelmj/why-and-how-to-use-pen-and-paper-design-an-algorithm-11nn %}\n{% post https://dev.to/miguelmj/5-tips-for-programming-and-cs-remote-teachers-1gg7 %}\n[You can follow me on Twitter! 🐦](https://twitter.com/MiguelMJdev)\n",
    "positive_reactions_count": 6,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--aEpN8JcI--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/240to8mgrzld0t1q036e.jpg",
    "tag_list": [
      "ai",
      "machinelearning",
      "nlp"
    ],
    "canonical_url": "https://dev.to/miguelmj/building-and-using-markov-chains-ai-for-text-generation-part-ii-1172",
    "reading_time_minutes": 4,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 722208,
    "title": "Introduction to Markov chains - AI for text generation - Part I",
    "description": "I've always found generative AI one of the most interesting branches in Computer Science. As in any...",
    "published": true,
    "published_at": "2021-07-09T14:13:03.739Z",
    "slug": "introduction-to-markov-chains-ai-for-text-generation-part-i-eha",
    "path": "/miguelmj/introduction-to-markov-chains-ai-for-text-generation-part-i-eha",
    "url": "https://dev.to/miguelmj/introduction-to-markov-chains-ai-for-text-generation-part-i-eha",
    "comments_count": 0,
    "public_reactions_count": 4,
    "page_views_count": 89,
    "published_timestamp": "2021-07-09T14:13:03Z",
    "body_markdown": "I've always found generative AI one of the most interesting branches in Computer Science. As in any other AI subfield, the range of complexity for the algorithms under this name is very wide. That's why I like Markov chains so much; while they have really simple logic behind, the results can be very interesting and funny.\n\n> Cover photo by <a href=\"https://unsplash.com/@sigmund?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Sigmund</a> on <a href=\"https://unsplash.com/s/photos/letter-soup?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n\n## What are Markov chains?\n\nWikipedia describes a Markov chain as a stochastic model describing a sequence of possible events in which the probability of each event depends only on the state attained in the previous event. \n\nLet's break it down a little:\n\n- *Stochastic model*: a model that presents **randomness** to some extent.\n- *The probability of each event depends only on the state attained in the previous event*: this refers to the Markov property, that holds when the future state depends only on the present state. In other words, **given the present, the future doesn't depend on the past**. Yes, math and computer science can get pretty philosophical sometimes.\n\n**So a Markov chain describes a sequence of events, that are not deterministic, and where each event only depends on the previous one**.\n\nMinimal example:\n<!-- ![Minimal example](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k48d08a5d5txus8irwwh.png) -->\n![Weather example](https://images.deepai.org/glossary-terms/markov-chain-5133015.jpg)\n<figcaption>Image from <a src=\"https://deepai.org/machine-learning-glossary-and-terms/markov-chain\">deepai.org</a></figcaption>\n \nThis diagram represents a Markov chain with two possible states/events: Sunny and Rainy.\n- When it is Sunny, there's a 90% probability that the next state will be Sunny and 10% it will be Rainy.\n- When it is Rainy, there's the probabilities of the next state being Sunnny or Rainy are 50/50.\n\nAnd in each state, it doesn't matter how many times it has been Sunny or Rainy before: a Markov chain has no memory, so no transition will make the probabilities change.\n\n## Realism of Markov chains\n\nWith the last example you can start to imagine that a lot of real world phenomena, like weather and speech, are not Markovian, because the weather of the past does influence the current, and what's going to be said depends a lot on what's been said earlier. For this reason, don't expect to program the new Cervantes with a Markov chain.\n\nHowever, this is an interesting starting point and, also, an approach with multiple use cases, like:\n\n- Text generation and prediction (your autocorrect, for example, uses a Markov chain *and* a Levenshtein automaton, but we will talk about that another day). \n- Music generation.\n- Modeling relatively complex state machines for weather simulations or NPC behavior in videogames.\n- Google's [PageRank](https://en.wikipedia.org/wiki/PageRank) is a Markov chain.\n\n## Text generation\n\nWe can model words as events in a Markov process. \n\n![Text chain example](https://2.bp.blogspot.com/-U2fyhOJ7bN8/UJsL23oh3zI/AAAAAAAADRs/wZNWvVR-Jco/s1600/text-markov.png)\n<figcaption>Image from <a src=\"http://awalsh128.blogspot.com/2013/01/text-generation-using-markov-chains.html\">awalsh128.blogspot.com</a></figcaption>\n\nPossible strings generated by this model are:\n\n- I like turtles.\n- I don't like snails.\n- I like rabbits.\n- I don't like rabbits.\n\n## Order of a Markov chain\n\nIn the last example, we only took into account a single word per state, so we say that the chain is of *first-order*. For a *N-th* order chain, each state represents the last *N* words. But doesn't it break the Markov principle? Not quite, because we are still using only the present state to decide the next one, only that we define *present* in a broader sense, as if instead of using \"now\" to refer to the current hour, you refered to the current day.\n\nThis concept will play a very important role in the training process (when we build the chain from existing text). We will see this in more detail when we talk about the implementation.\n\n## Conclusion\n\nMarkov chains have a wide variety of uses. With a very simple model, easy to build and easy to use, we can simulate rather complex behaviors. Now that we've covered the theory basics, I will explain it's implementation step by step in different programming languages.\n\nLet me know your thoughts in the comments!\n\n## References\n\n<!-- https://dev.to/rohit/demystifying-tail-call-optimization-5bf3-->\n- https://en.wikipedia.org/wiki/Markov_chain\n- https://deepai.org/machine-learning-glossary-and-terms/markov-chain\n- https://medium.com/swlh/machine-learning-algorithms-markov-chains-8e62290bfe12\n\n***\n\n***Recommended reading***\n{% post https://dev.to/miguelmj/take-full-advantage-of-high-order-functions-examples-in-javascript-4ibg %}\n{% post https://dev.to/miguelmj/the-turing-machine-made-understandable-35po %}\n[You can follow me on Twitter! 🐦](https://twitter.com/MiguelMJdev)\n",
    "positive_reactions_count": 4,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--jY-px55J--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1rv2o1w64tby3xfzjq4.jpg",
    "tag_list": [
      "ai",
      "machinelearning",
      "nlp"
    ],
    "canonical_url": "https://dev.to/miguelmj/introduction-to-markov-chains-ai-for-text-generation-part-i-eha",
    "reading_time_minutes": 4,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 735381,
    "title": "Take full advantage of high order functions - Examples in Javascript",
    "description": "Functions are more than just a way to avoid repetition in your code. The powerful concepts of...",
    "published": true,
    "published_at": "2021-06-22T08:07:00.116Z",
    "slug": "take-full-advantage-of-high-order-functions-examples-in-javascript-4ibg",
    "path": "/miguelmj/take-full-advantage-of-high-order-functions-examples-in-javascript-4ibg",
    "url": "https://dev.to/miguelmj/take-full-advantage-of-high-order-functions-examples-in-javascript-4ibg",
    "comments_count": 0,
    "public_reactions_count": 49,
    "page_views_count": 1078,
    "published_timestamp": "2021-06-22T08:07:00Z",
    "body_markdown": "Functions are more than just a way to avoid repetition in your code. The powerful concepts of functions as objects that can be manipulated and altered in runtime will improve the flexibility and scalability of your applications. Learn to use and write high order functions to raise the quality of your work.\n\n**Contents**\n\n1. Introduction\n    1. Functions as subroutines vs Functions as stored computations\n    2. What are higher order functions?\n2. Some use cases for higher order functions\n    1. Set aditional constraints to existing functions\n    2. Create other functions with same logic but different parameters\n    3. Use another function within a data structure\n3. Higher order functions for lists\n4. Complete example\n5. Conclusion\n\n## Introduction\n### Functions as subroutine vs Functions as stored computations\n\nFrom a simplified perspective, functions are used to reduce repetition of code, separating some logic that accepts parameters and might (or not) return a value. However, from mathematics and the paradigm of functional programming, we get a more powerful concept of function, as an applicable computation.\n\nWhat’s interesting about this subtle difference is that a computation can be stored as data too. In some dynamic languages like Javascript and Python, this means that you can manipulate functions as objects, as what’s called first class citizens.\n\n### What are higher order functions?\n\nIn short, high order functions are the ones that use other functions as objects.\n\n- Functions that take other functions as parameters.\n- Functions whose return value is another function.\n\n![Higher function schema](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/votslcco1e55ocah286i.png) \n\n## Some use cases for higher order functions\n\n> Before we go on, a quick remainder that the `x => y` syntax is equivalent to `function(x){ return y }`.\n\n### Set additional constraints to existing functions\n\nExample: Function to limit the range of another function’s output.\n\n```js\nconst clampedFunc = function(fun, min, max){\n    return (...args) => Math.max(min, Math.min(max, fun(...args)))\n}\n\n// Demonstration\nsquared1 = x => x*x\nsquared2 = clampedFunc(squared1, 25, 100)\n\nsquared1(3) // 9\nsquared1(6) // 36\nsquared1(12) // 144\n\nsquared2(3) // 25\nsquared2(6) // 36\nsquared2(12) // 100\n```\n\n### Create other  functions with same logic but different parameters\n\nExample: Function to create linear functions.\n\n```js\nconst linear = function(m, n){\n    return (x) => m*x + n\n}\n\n// Demonstration\nf1 = linear(1, 2)\nf1(10) // 12\nf1(20) // 22\n\nf2 = linear(2, -5)\nf2(7) // 9\nf2(8) // 11\n```\n\n### Use another function within a data structure\n\nThis is actually the most common use case. In fact, most modern languages have this kind of functions in their standard libraries. We’re going to see some in the next section.\n\n## Higher order functions for lists\n\n- `forEach`: Apply a function to each element of the list and ignore the return values, if any.\n- `map`: Apply a function to each element of the list and return a list of all returned values. In other languages it’s called apply.\n- `reduce`: Apply a function of two arguments to the two first elements. Then, apply it again to the result and the third element. Then, apply it to the result and the fourth element, etc. In short, accumulate the value of a function for all the elements.  In other languages it’s called fold.\n\n![Schema of forEach, map and reduce](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q9633juvv89gyzluqezj.png) \n\nFor the following, a condition means a function that returns a boolean value.\n\n- `some`: Return true if at least one element satisfies a condition. In other languages it’s called any.\n- `every`: Return true if all elements of the list satisfy a condition.\n- `filter`: Return a list only with the elements that satisfy the condition.\n\nExamples:\n\n```js\nnums = [ 1, 2, 3, 4, 5 ]\nwords = [ 'how', 'are', 'you' ]\n\nnums.forEach(x => console.log(\"- \" + x))\n// returns nothing but prints nums as a bullet list\nnums.map( x => x*3 )\n// [ 3, 6, 9, 12, 15 ]\nwords.reduce( (x, y) => x + ' ' + y )\n// 'how are you'\nnums.some( x => x > 5 )\n// false\nwords.every( x => x.length == 3 )\n// true\nnums.filter(x => x % 2 == 0)\n// [ 2, 4 ]\n```\n \n## Complete example\n\nLet’s apply all we have learned to a single case.\n\n```js\n// Function to concatenate other two functions (this is called composition)\nconst compose = function (f1, f2){\n    return (...args) => f2(f1(...args))\n}\n// Function to compose any number of functions (general composition)\nconst gCompose = function(fs){\n    return fs.reduce(compose)\n}\n// Function to generate custom formatter functions\nconst custom_fmt = function(text, variable){\n    return (value) => text.replace(variable, value)\n}\n// Convert USD to Euros\nconst usd2eur = function(x){\n    return x/1.2\n}\n// Fix the precision a number to 2\nconst fix2 = function(x){\n    return x.toFixed(2)\n}\n\n// Store the functions in the order we want to apply them\nmyComputation = [usd2eur, fix2, custom_fmt(\"Cost in EUR: x\", \"x\")]\n// Compose them into a single function\nmyComputationFunc = gCompose(myComputation)\n// Apply the computation we just created to each element of our list and print the result\nusdCosts = [2.50, 10.99, 3.3, 5.72]\nusdCosts.map(myComputationFunc).forEach(x => console.log('-',x))\n\n/* Console output\n- Cost in EUR: 2.08\n- Cost in EUR: 9.16\n- Cost in EUR: 2.75\n- Cost in EUR: 4.77\n*/\n```\n\n## Conclusion\n\nFor a small example, this approach is somewhat excessive, but illustrative. It is important to know how high order functions work and what possibilities they offer:\n\n- Minimize the use of loops and branches in your code, improving legibility.\n- Help you abstract and generalize processes, making the program more flexible and scalable.\n- Reduce the code of large applications with atomic computations applied to data that might require more or less processing or where the required transformations change during execution.\n\nI hope you found this post useful, let me know your thoughts in the comments! \n\n***\n\n***Recommended reading***\n{% post https://dev.to/miguelmj/i-made-a-recommendation-system-for-stack-overflow-unanswered-questions-280a %}\n{% post https://dev.to/miguelmj/make-your-python-program-highly-configurable-3blk %}\n\n[You can follow me on Twitter! 🐦](https://twitter.com/MiguelMJdev)",
    "positive_reactions_count": 49,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--Pe6x4SNM--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic4silumcctakyfvzfoj.png",
    "tag_list": [
      "tutorial",
      "javascript",
      "functional"
    ],
    "canonical_url": "https://dev.to/miguelmj/take-full-advantage-of-high-order-functions-examples-in-javascript-4ibg",
    "reading_time_minutes": 4,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 727218,
    "title": "Data structures in Prolog - Where to start",
    "description": "Defining the structures that represent the information of your program should be one of the first...",
    "published": true,
    "published_at": "2021-06-15T18:20:11.540Z",
    "slug": "data-structures-in-prolog-where-to-start-53gm",
    "path": "/miguelmj/data-structures-in-prolog-where-to-start-53gm",
    "url": "https://dev.to/miguelmj/data-structures-in-prolog-where-to-start-53gm",
    "comments_count": 0,
    "public_reactions_count": 8,
    "page_views_count": 336,
    "published_timestamp": "2021-06-15T18:20:11Z",
    "body_markdown": "---\ncover_image: https://res.cloudinary.com/practicaldev/image/fetch/s--EVwjq_Mm--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ft1zpt1usxnpyg9sn2n.jpg\n---\n\nDefining the structures that represent the information of your program should be one of the first steps for its design. For that same reason, after learning the basics of a language, the immediate step should be learning how to represent and use the most common data structures.\n\n> The difference between a bad programmer and a good one is whether he considers his code or his data structures more important.\nLinus Torvalds\n\n***\n\n> Cover photo by [Fred Zegveld](https://www.pexels.com/@fred-zegveld-3754109) from Pexels.\n\nThis post doesn't aim to cover the basics of Prolog, so it's understood that you are familiar with terms, variables, atoms, facts and predicates. If that's not the case and you want to learn, go check the [awesome-prolog](https://github.com/klaussinani/awesome-prolog#resources) repository, where you can find great resources for that.\n\n## Purpose of this post\n\nAs I said in my post about algebra in Python (link at the end), we should use built-in functionalities of high-level languages when possible. This makes our code more legible, idiomatic and, usually, faster, because it's probable that the underlying logic is better tested than ours.\n\nWhen I started to plan this post, I wanted to make a comprehensive guide on different data structures in Prolog. Nonetheless, researching on built-in structures, I found out that:\n\n- There are small differences between implementations.\n- There is better content about this topic out there, that takes into account much more things that I did initially.\n\nSo instead of making a huge post of a series just by rephrasing all my references, I decided to gather the resources here. It took me some time to find these, so maybe I can spare some time to other people looking for the same information.\n\nI have split the post in two parts:\n\n1. A collection of references for general and specific data structures. \n2. Some considerations for writing your own data structures.\n\n## Links of interest for existing data-structures\n\nRight now I'm working with SWI-Prolog, so part of the links will be to their modules, which may be different in other implementations. However, I might come back to add links from other implementations if I get to work with them.\n\n### Lists\n\n- [The Power of prolog - Prolog Data Structures - Lists](https://www.metalevel.at/prolog/data#list)\n- [Learn Prolog Now! - Chapter 4. Lists](https://www.let.rug.nl/bos/lpn//lpnpage.php?pagetype=html&pageid=lpn-htmlch4)\n- [Learn Prolog Now! - Chapter 6. More Lists](https://www.let.rug.nl/bos/lpn//lpnpage.php?pagetype=html&pageid=lpn-htmlch6)\n- [The SWI-Prolog library - library(lists): List manipulation](https://eu.swi-prolog.org/pldoc/man?section=lists)\n\n### Sets\n\n- [The SWI-Prolog library - library(lists): List manipulation](https://eu.swi-prolog.org/pldoc/man?section=lists#is_set/1) (Second half)\n- [The SWI-Prolog library - library(ordsets): Ordered st manipulation](https://eu.swi-prolog.org/pldoc/man?section=ordsets)\n\n### Key-value pairs & Association lists\n\n- [The Power of prolog - Prolog Data Structures - Pairs](https://www.metalevel.at/prolog/data#pair)\n- [The Power of prolog - Prolog Data Structures - Association lists](https://www.metalevel.at/prolog/data#assoc)\n- [SWI-Prolog library - library(pairs): Operations on key-value lists](https://eu.swi-prolog.org/pldoc/man?section=pairs)\n- [SWI-Prolog library - library(assoc): Association lists](https://eu.swi-prolog.org/pldoc/man?section=assoc)\n\n### Dictionaries\n\n- [Dicts: structures with named arguments](https://www.swi-prolog.org/pldoc/man?section=bidicts)\n- [The SWI-Prolog library - library(dicts): Dict utilities](https://eu.swi-prolog.org/pldoc/man?section=dicts)\n- [Question about dictionaries and their nuances](https://swi-prolog.discourse.group/t/question-about-dictionaries-and-their-nuances/1045/2)\n\n### Matrices\n\n- [External package for SWI-Prolog: matrices.pl](https://github.com/friguzzi/matrix) | [Documentation](https://www.swi-prolog.org/pack/file_details/matrix/prolog/matrix.pl)\n\n## Data structures and logic programming. Describe relations, not operations\n\nBefore starting, it's important to note something. We are used to defining data structures by the relationship of the data they contain and the operations you can perform on them. However, in Prolog, all of this might be defined all at once in many cases.\n\n**The same predicate can be used for different tasks**, because the same definition explains many behaviors. After all, we are talking about a language where you can use `append` to split a list:\n\n```prolog\n% Append L1 and L2 into L3\n?- L1 = [1,3,5], L2 = [2,4,6], append(L1,L2,L3).\nL1 = [1, 3, 5],\nL2 = [2, 4, 6],\nL3 = [1, 3, 5, 2, 4, 6].\n\n% Remove L1 from the beginning of L3 to get L2\n?- L1 = [1,3,5], L3 = [1,3,5,2,4,6], append(L1,L2,L3).\nL1 = [1, 3, 5],\nL3 = [1, 3, 5, 2, 4, 6],\nL2 = [2, 4, 6].\n```\n\nThe most straightforward example to illustrate this is with a custom data structure is a **stack**. Instead of implementing the `push` and `pop` operations, we are just going to define one predicate that describe both operations at the same time.\n\n```prolog\n% push_pop(Stack1, Element, Stack2)\npush_pop([X|S], X, S).\n\n% Use it to pop\n?- push_pop([10,20,30], X, S).\nX = 10\nS = [20, 30]\n\n% Use it to push\n?- push_pop(S, 0, [10, 20, 30]).\nS = [0, 10, 20, 30]\n```\n\nHere are some interesting topics to also have in mind for your design:\n- [Logical purity](https://www.metalevel.at/prolog/purity), to prevent side effects, facilitate reasoning about your own program and enable automatic optimizations.\n- [Clean vs Defaulty representations](https://www.metalevel.at/prolog/data#clean) to optimize choice points out and keep semantic coherence.\n\n## Conclusion\n\nIf you've got this far, you must be a Prolog beginner, as I am. I hope you found this useful and if you have more Prolog data structures related resources, feel free to put the link in the comments and I will add it to the list.\n\n***Recommended reading***\n\n{% post miguelmj/beginner-tips-to-do-algebra-in-python-477e %}\n{% post miguelmj/thoughts-on-declarative-programming-why-i-m-learning-prolog-43be %}\n\n[You can follow me on Twitter! 🐦](https://twitter/MiguelMJdev)\n",
    "positive_reactions_count": 8,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--EVwjq_Mm--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ft1zpt1usxnpyg9sn2n.jpg",
    "tag_list": [
      "prolog",
      "datastructures",
      "resources"
    ],
    "canonical_url": "https://dev.to/miguelmj/data-structures-in-prolog-where-to-start-53gm",
    "reading_time_minutes": 4,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 688379,
    "title": "Make your Python program highly configurable",
    "description": "The more complex a program is, the more parameters it tends to accept in order to tune it's behavior....",
    "published": true,
    "published_at": "2021-05-05T09:51:42.727Z",
    "slug": "make-your-python-program-highly-configurable-3blk",
    "path": "/miguelmj/make-your-python-program-highly-configurable-3blk",
    "url": "https://dev.to/miguelmj/make-your-python-program-highly-configurable-3blk",
    "comments_count": 0,
    "public_reactions_count": 4,
    "page_views_count": 182,
    "published_timestamp": "2021-05-05T09:51:42Z",
    "body_markdown": "The more complex a program is, the more parameters it tends to accept in order to tune it's behavior. **A configurable program is easier to adapt to the needs of the user** (and your own) and reduces the amount of code you have to modify if you want to change certain things.\n\nThere are three ways to specify parameters in your code:\n\n1. Directly in the **source code**.\n2. Inside a separate **configuration file**.\n3. With the arguments from the **command line**.\n\nEach one should override the parameters of the previous one. How do we implement this in a clean way?\n\n## 1. Get all the parameters separately\n\n### From the source code\n\nThis needs no explanation. The default configuration is hard-coded.\n\n```python\ndefault_config = {\n    \"mode\": \"demo\",\n    \"timeout\": 5,\n    \"color\": blue,\n    \"language\": \"en\"\n}\n```\n\n### From a configuration file\n\nThere are countless ways to read a configuration file, from a custom parsing function to a library like [configparser](https://docs.python.org/3/library/configparser.html). Obviously, your choice will determine the format of the file and each one has its own pros and cons.\n\nTo keep this simple, I will use a regular JSON file:\n\n```python\nimport json\n\nwith open(\"config.json\", \"r\") as f:\n    file_config = json.load(f)\n```\n\n### From the command line\n\nAgain, there are multiple ways to parse the arguments from the command line. I think the most extended is [argparse](https://docs.python.org/3/library/argparse.html), because it is flexible and implements directly a lot of commonly expected behaviour, like an autogenerated help message and more.\n\nHowever, it makes the code too long for an example like this, so I'll use a custom piece of code to parse arguments with the form `--key=value`.\n\n```python\nimport sys\n\nparams = filter(lambda x: x[:2] == \"--\", sys.argv)\nparams = map(lambda x: x.split(\"=\"), params)\ncli_config = {k[2:]: v for [k,v] in params}\n```\n\n## 2. Override values present in lower levels\n\nIn Python, the double star (`**`) operator is used to unpack dictionaries. It extracts the key-value pairs to be used elsewhere.\n\nOne of the most interesting uses of this operator is to **merge dictionaries**, building a new one from other unpacked. As they only allow unique keys, the dictionaries unpacked on the right replace the values repeated on the left.\n\n```python\nfinal_config = {**default_config, **file_config, **cli_config}\n```\n\n## Example\n\nLet's put together what we have:\n\n**main.py**\n```python\nimport sys\nimport json\n\n## default\ndefault_config = {\n    \"mode\": \"demo\",\n    \"timeout\": 5,\n    \"color\": \"blue\",\n    \"language\": \"en\"\n}\n\nprint(\"default\", default_config)\n\n## file\nwith open(\"config.json\", \"r\") as f:\n    file_config = json.load(f)\n\nprint(\"file   \", file_config)\n\n## command line\nparams = filter(lambda x: x[:2] == \"--\", sys.argv)\nparams = map(lambda x: x.split(\"=\"), params)\ncli_config = {k[2:]: v for [k,v] in params}\n\nprint(\"cli    \", cli_config)\n\n## merge them\nfinal_config = {**default_config, **file_config, **cli_config}\n\nprint(\"final  \", final_config)\n```\n**config.json**\n```json\n{\n    \"color\": \"red\",\n    \"timeout\": 10\n}\n```\n### Output\n```bash\n$ python main.py --color=green --language=es\ndefault {'mode': 'demo', 'timeout': 5, 'color': 'blue', 'language': 'en'}\nfile    {'color': 'red', 'timeout': 10}\ncli     {'color': 'green', 'language': 'es'}\nfinal   {'mode': 'demo', 'timeout': 10, 'color': 'green', 'language': 'es'}\n```\n\n## Conclusion\n\nMaking your programs configurable will make a lot of your work easier. Allowing the user (and yourself as a developer) to customize parts of your application without modifying the source code both in a persistent and a dynamic way always makes a difference.\n\n***\n\n***Recommended reading***\n\n{% post miguelmj/how-to-make-an-ethical-crawler-in-python-4o1g %}\n{% post miguelmj/i-made-a-recommendation-system-for-stack-overflow-unanswered-questions-280a %}\n\n[You can follow me on Twitter! 🐦](https://twitter/MiguelMJdev)",
    "positive_reactions_count": 4,
    "cover_image": null,
    "tag_list": [
      "python",
      "todayilearned",
      "productivity",
      "tutorial"
    ],
    "canonical_url": "https://dev.to/miguelmj/make-your-python-program-highly-configurable-3blk",
    "reading_time_minutes": 3,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    },
    "flare_tag": {
      "name": "todayilearned",
      "bg_color_hex": "#ffedc9",
      "text_color_hex": "#820000"
    }
  },
  {
    "type_of": "article",
    "id": 582219,
    "title": "Trucos básicos de álgebra en Python",
    "description": "Hay dos tipos de personas con una dificultad común a la hora de empezar a usar Python: las que aprend...",
    "published": true,
    "published_at": "2021-04-05T12:25:28.117Z",
    "slug": "trucos-basicos-de-algebra-en-python-48mf",
    "path": "/miguelmj/trucos-basicos-de-algebra-en-python-48mf",
    "url": "https://dev.to/miguelmj/trucos-basicos-de-algebra-en-python-48mf",
    "comments_count": 0,
    "public_reactions_count": 4,
    "page_views_count": 72,
    "published_timestamp": "2021-04-05T12:25:28Z",
    "body_markdown": "Hay dos tipos de personas con una dificultad común a la hora de empezar a usar Python: las que aprenden los fundamentos de programación directamente en este lenguaje y quienes vienen de programar en un lenguaje de más bajo nivel.\n\nComo pertenezco al segundo grupo, sé que tendemos a ignorar las soluciones nativas para ciertos problemas y preferimos resolverlo de manera algorítmica (escribiendo el código desde cero). Esta decisión es mejor si queremos aprender, pero los lenguajes de alto nivel ofrecen soluciones que suelen ser más fáciles de escribir, leer y mantener.\n\nDaré por hecho conocimiento de listas, diccionarios y conjuntos en Python y que tienes nociones básicas de álgebra.\n\n**Contents**\n\n- [Compresión de listas, diccionarios, conjuntos](#1)\n- [Operaciones de conjuntos](#2)\n  - [Conjuntos de conjuntos](#2-1)\n- [Módulo `functools`](#3)\n  - [`functools.reduce`](#3-1)\n  - [`@functools.lru_cache`](#3-2)\n- [Ejemplo práctico](#4)\n\n<h2 id=\"1\">Comprensión de Listas, Diccionarios y Conjuntos</h2>\n\nDigamos que tenemos una lista de números y queremos extraer de ella sólo los pares en una lista separada. Una posibilidad válida sería:\n\n```python\nmi_lista = [5,4,3,7,8,1,12]\npares = []\nfor n in mi_lista:\n  if (n%2 == 0):\n    pares.append(n)\nprint(pares)\n# [4,8,12]\n```\n\nEste proceso es bastante estándar en lenguajes de tipo C, por ejemplo. Sin embargo, una manera más pitónica de conseguir lo mismo es construir una **lista por comprensión**:\n\n```python\nmi_lista = [5,4,3,7,8,1,12]\npares = [x for x in mi_lista if x%2 == 0]\nprint(pares)\n# [4,8,12]\n```\n\nLa comprensión de listas es un atajo para construir una nueva lista usando una expresión y una condición opcional, aplicados a los elementos de un objeto iterable. La sintaxis es la siguiente:\n\n```python\n# sin filtro\n[expresion for elemento in secuencia]\n# con filtro\n[expresion for elemento in secuencia if condicion]\n```\n\nVeamos otro ejemplo, como copiar una lista de strings cambiando los elementos de minúscula a mayúscula:\n\n```python\nnombres = ['Mikkel', 'Jonas', 'Martha']\nnombres_mayus = [nombre.upper() for nombre in nombres]\nprint(nombres_mayus)\n# ['MIKKEL','JONAS','MARTHA']\n```\n\nAhora, también es posible definir conjuntos y diccionarios por comprensión:\n\n```python\n# conjuntos\nset(expresion for elemento in secuencia)\n{expresion for elemento in secuencia}\n# diccionarios (nota la diferencia de como especificar el par clave-valor en cada caso)\ndict((clave, valor) for elemento in secuencia if condicion)\n{clave:valor for elemento in secuencia if condicion}\n```\n\nPero, ¡hay más! No tienes por qué iterar una sola secuencia; Python te permite añadir más de un `for <secuencia>` en tus comprensiones. Algunos ejemplos:\n\n```python\n# unir dos diccionarios\nunion = {k:v for (k,v) in dic1 for (k,v) in dic2}\n# producto cartesiano de dos conjuntos\n# - notese que el resultado no es un diccionario, sino un set de tuplas\ncartesiano = {(x,y) for x in conj1 for y in conj2}\n```\n\n[Aquí](https://www.smallsurething.com/list-dict-and-set-comprehensions-by-example/) encontrarás más ejemplos de comprensión de listas, diccionarios y conjuntos en inglés.\n\n[Aquí](https://docs.python.org/es/3.8/tutorial/datastructures.html#list-comprehensions) encontrarás algunos en español.\n\n<h2 id=\"2\">Operaciones de conjuntos</h2>\n\nCon la comprensión de conjuntos, sería fácil definir las operaciones habituales entre conjuntos.  Por suerte, Python ya define estas operaciones de manera nativa.\n\n```python\nabcde = {'a','b','c','d','e'}\nvocales = {'a','e','i','o','u'}\n\nintereseccion = abcde & vocales\n# {'a','e'}\nunion = abcde | vocales\n# {'a', 'b', 'c', 'd', 'e', 'i', 'o', 'u'}\ndiferencia = abcde - vocales\n# {'b','c','d'}\ndiferencia_simetrica = abcde ^ vocales\n# {'b','c','d','i','o','u'}\n```\n\n_Ojo, los valores resultantes no tienen porque estar ordenados, pero lo he escrito así para facilitar su lectura._\n\nAdemás, no sólo define operaciones que resulten en nuevos conjuntos, sino también operadores booleanos como:\n\n```python\nes_subconjunto_estricto1 = abcde < abcde\n# False\nes_subconjunto_estricto2 = diferencia < abcde\n# True\n\nes_subconjunto1 = abcde <= vocales\n# False\nes_subconjunto2 = abcde <= abcde\n# True\nes_subconjunto3 = diferencia <= abcde\n# True\n\nvacio = bool(abcde)\n# False\nvacio = bool(abcde - abcde)\n# True\n```\n\n<h3 id=\"2-1\">Conjuntos de conjuntos</h3>\n\nUna limitación a tener en cuenta al trabajar con conjuntos en Python, es que éstos solo pueden contener tipos a los que se les pueda hacer un hash (_hashable_), como los tipos numéricos, los string o las tuplas. Los conjuntos, en cambio, no son _hashables_. Por esta razón, si quieres almacenar un conjunto de conjuntos, debes utilizar en cambio una lista de conjuntos. Ahora sí que nos va a servir la comprensión de listas para remplazar las operaciones de conjuntos.\n\n```python\nconj1 = [{1,2,3}, {'a','b','c'}, {'A','B','C'}]\nconj2 = [{'a','b','c'}, {'b','c'}, {'c'}]\n\ninterseccion = [x for x in conj1 if x in conj2]\n# [{'a','b','c'}]\ndiferencia  = [x for x in conj1 if x not in conj2]\n# [{1,2,3}, {'a','b','c'}, {'A','B','C'}]\nunion = conj2 + diferencia\n# [{'a', 'b', 'c'}, {'b', 'c'}, {'c'}, {1, 2, 3}, {'A', 'B', 'C'}]\n\n# Creo que la idea está clara\n```\n\n<h2 id=\"3\">Módulo <code>functools</code></h2>\n\nEste módulo proporciona utilidades bastante interesantes, pero sólo hablaré de dos: `reduce` y `@lru_cache`.\n\n[Aquí](https://docs.python.org/es/3.8/library/functools.html) encontrarás la documentación oficial del módulo en español.\n\n<h3 id=\"3-1\"><code>functools.reduce</code></h3>\n\n`reduce` es una herramienta muy potente, capaz de generalizar casi cualquier proceso iterativo en una lista (si no todos) y os recomiendo encarecidamente que profundicéis en su uso por vuestra cuenta. Para lo que nos concierne, lo utilizaré para generalizar las operaciones de conjuntos en un número indefinido de sets.\n\nDigamos que tenemos los mismos conjuntos que en el último ejemplo, y queremos hacer la unión de todos los conjuntos. Sería posible hacer:\n\n```python\nconj1 = [{1,2,3}, {'a','b','c'}, {'A','B','C'}]\nunion = set() \nfor x in conj1:\n  union = union | x\n```\n\nPero con `reduce` obtenemos el mismo comportamiento como sigue:\n\n```python\nconj1 = [{1, 2, 3}, {'a', 'b', 'c'}, {'A', 'B', 'C'}]\nunion = functools.reduce(set.union, set1)\n# {1, 2, 3, 'a', 'A', 'b', 'c', 'B', 'C'}\n```\n\nEl primer argumento es la función que queremos aplicar entre los elementos de la lista de manera acumulativa. Para ello, en lugar de el operador (`|` en este caso), hay que usar la función con nombre (`set.union` en este caso). Para encontrar las funciones con nombre correspondientes a los operadores de conjuntos, puedes escribir `help(set)` en la consola de Python.\n\n<h3 id=\"3-2\"><code>@functools.lru_cache</code></h3>\n\nComo puedes imaginar, las comprensiones son fáciles de escribir y entender, pero no son muy baratas en coste de computación. El módulo `functools` proporciona varias maneras de almacenar en una caché los resultados de una función (un comportamiento similar se obtiene con `@functools.cached_property`).\n\n```python\n@functools.lru_cache\ndef contar_vocales(frase):\n    frase = frase.casefold()\n    return sum(frase.count(vocal) for vocal in 'aeiou')\n```\n\nCon esa sencilla anotación, un número limitado de llamadas almacenarán su resultado, por si vuelven a ser llamadas, para devolver el valor almacenado en lugar de ejecutar el mismo código de nuevo.\n\nEsto no sólo es útil para funciones deterministas lentas, sino también para funciones recursivas que se vayan a usar repetidamente. Por ejemplo:\n\n```python\n@functools.lru_cache\ndef factorial(n):\n    return n*factorial(n-1) if n else 1\n```\n\n<h2 id=\"4\">Ejemplo práctico</h2>\n\nVeamos como se aplica todo, por ejemplo, para representar y procesar relaciones familiares.\n\n```python\nimport functools\n\n# https://es.wikipedia.org/wiki/Clausura_transitiva\ndef cierre_transitivo(relacion):\n    cierre = relacion\n    while True:\n        delta = {(x,y) for (x,r1) in cierre for (r2,y) in cierre if r1 == r2}\n        nuevo_cierre = cierre | delta\n        if nuevo_cierre == cierre:\n            break\n        cierre  = nuevo_cierre\n    return cierre\n\n# Información de descendencia directa\nrelacion_hijo = {\n         ('Martha','Ulrich'),\n         ('Mikkel','Ulrich'),\n         ('Magnus','Ulrich'),\n         ('Mads','Tronte'),\n         ('Ulrich','Tronte'),\n         ('Tronte','Agnes'),\n         ('Jonas','Hannah'),\n         ('Jonas','Michael')}\n\nrelacion_descendiente = cierre_transitivo(relacion_hijo)\n\n# Algunas funciones que usan la nueva relación\n@functools.lru_cache\ndef ancestros_de(x):\n    return {b for (a,b) in relacion_descendiente if a==x}\n\ndef es_descendiente_de(x,y):\n    return y in ancestros_de(x)\n\ndef son_familia(lista_personas):\n    ancestros = [ancestors_de(x) for x in lista_personas]\n    ancestros_comunes = functools.reduce(set.intersection, ancestros)\n    return bool(ancestros_comunes)\n\nprint(ancestros_de('Martha'))\n# {'Agnes','Tronte','Ulrich'}\nprint(es_descendiente_de('Jonas', 'Agnes'));\n# False\nprint(es_descendiente_de('Martha', 'Agnes'));\n# True\nprint(son_familia(['Martha', 'Jonas']));\n# False\nprint(son_familia(['Martha', 'Magnus', 'Mikkel']));\n# True\n```\n***\nEspero que esta información te resulte útil. ¿Tienes algún consejo que compartir? Si tienes alguna experiencia resolviendo problemas de matemáticas en Python, ¡me encantaría leerla!",
    "positive_reactions_count": 4,
    "cover_image": null,
    "tag_list": [
      "spanish",
      "python",
      "tutorial"
    ],
    "canonical_url": "https://dev.to/miguelmj/trucos-basicos-de-algebra-en-python-48mf",
    "reading_time_minutes": 6,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 654793,
    "title": "Open sourcing a Python project? - Tools you should know about",
    "description": "At the moment I'm writing, I have no work experience, so my only way to practically learn about softw...",
    "published": true,
    "published_at": "2021-04-05T12:24:37.883Z",
    "slug": "open-sourcing-a-python-project-tools-you-should-know-about-8bc",
    "path": "/miguelmj/open-sourcing-a-python-project-tools-you-should-know-about-8bc",
    "url": "https://dev.to/miguelmj/open-sourcing-a-python-project-tools-you-should-know-about-8bc",
    "comments_count": 5,
    "public_reactions_count": 8,
    "page_views_count": 129,
    "published_timestamp": "2021-04-05T12:24:37Z",
    "body_markdown": "At the moment I'm writing, I have no work experience, so my only way to practically learn about software development is via open source projects. Some time ago, I released the first version of Answerable, my first open source Python project.\n\n{% github MiguelMJ/Answerable no-readme %}\n\nAlthough **I had known Python for a long time, I had always used it for personal projects and college assignments**. For this reason, when I made my code open I had to ask questions, accept criticism and see what others did. Here I want to show you some things I learnt about.\n\n## Style, PEP 8 and *Black*\n\nWhen you make a project open source, you want to make the code accessible and clear. Anyone recognizes spaghetti code when they see it, no matter what their personal coding style is. You must cover some minimums here. \n\nAlso, a core part of the Python philosophy is code readability. The first tenet in [the Zen of Python](https://www.python.org/dev/peps/pep-0020/) reads:\n\n> Beautiful is better than ugly.\n\nSo, as I saw some references here and there about a document called [PEP 8 -- Style Guide for Python Code](https://www.python.org/dev/peps/pep-0008/), I started reading it to learn it and apply it to my code.\n\nSoon, I was told that it was a waste of time when I could use a code formatter like [*Black*](https://black.readthedocs.io/en/stable/index.html). It is easy to learn and use and the improvement is immediately noticeable. You can correct your files on the spot or just print a diff with the changes without really applying them.\n\n*Example 1. Formatting files directly*:\n![black_example_2](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rc8j9170aird32wn612z.png)\n\n*Example 2. Printing the diff without change*:\n![black_example_1](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipgpe1xp7lwp51ilbnlt.png) \n\nHowever, I don't think reading the PEP 8 is a waste of time. _Black_ may ignore some things that you still should pay attention to in order to have a clean style. Still, it is really good for general style revisions.\n\n{% github psf/black no-readme %}\n\n## Checking the code  with _pyflakes_ and _vulture_\n\nSome errors in the code won't be noticed until execution, but they can be prevented with a meticulous review beforehand. The same happens with dead code that's been left after some changes. Pyflakes and Vulture can help you with that.\n\n**Pyflakes** is a passive code checker; it parses the code without executing it, so it won't break anything. It points out variable conflicts and, in contrast to other checkers, it doesn't complain about code style (we have black for that and more). \n\n**Vulture** finds dead code: unused variables, functions and imports. But doesn't Pyflakes include this? Not exactly, because Pyflakes follows the principle of trying as hard as possible to avoid false positives. Vulture, on the other hand, adds to each warning a percentage of confidence. In Python is hard to tell when some function is unused, because it's a dynamic language, and in most cases, Pyflakes doesn't warn you about them.\n\n*Output comparison*:\n![pyflakes_vulture](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ea8njerkkkq62a3sag98.png)\n\n{% github PyCQA/pyflakes no-readme %}\n{% github jendrikseipp/vulture no-readme %}\n\n## Tracking dependencies with *pipreqs*\n\nLastly, if you want your project to be used or modified by other programmers, it is better if they can install the dependencies directly, instead of installing them one by one, each one after a `module not found error`. For this purpose you have to **add a `requirements.txt` file to your project**.\n\nYou could do it manually (but that's not fun) or use `pip freeze`, but that writes all your installed packages, many more than necessary. Instead, using **pipreqs**, a requirements.txt file is generated with only the packages that your project uses.\n\n*Pipreqs example:*\n![pipreqs_example](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmiizodri4tibqrhaq32.png)\n\nNow if someone clones your project, they can just use `pip install -r requirements.txt` and the dependencies will be installed.\n\n{% github bndr/pipreqs no-readme %}\n\n## Conclusion\n\nI hope you find some of these as useful as I did. I'm pretty sure there are other great tools out there to use in Python projects. Do you know any? Please share them in the comments!\n \n***\n\n***Recommended reading***\n\n{% post miguelmj/beginner-tips-to-do-algebra-in-python-477e %}\n{% post miguelmj/multidisciplinarity-what-s-there-besides-code-2en9 %}\n\n[You can follow me on Twitter! 🐦](https://twitter/MiguelMJdev)",
    "positive_reactions_count": 8,
    "cover_image": null,
    "tag_list": [
      "beginners",
      "python",
      "codequality"
    ],
    "canonical_url": "https://dev.to/miguelmj/open-sourcing-a-python-project-tools-you-should-know-about-8bc",
    "reading_time_minutes": 3,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 639718,
    "title": "Multidisciplinarity - What's there besides code?",
    "description": "The first thing that comes to most people's minds when they think of software development is programm...",
    "published": true,
    "published_at": "2021-03-24T11:42:26.514Z",
    "slug": "multidisciplinarity-what-s-there-besides-code-2en9",
    "path": "/miguelmj/multidisciplinarity-what-s-there-besides-code-2en9",
    "url": "https://dev.to/miguelmj/multidisciplinarity-what-s-there-besides-code-2en9",
    "comments_count": 8,
    "public_reactions_count": 8,
    "page_views_count": 190,
    "published_timestamp": "2021-03-24T11:42:26Z",
    "body_markdown": "The first thing that comes to most people's minds when they think of software development is *programming*. This is natural; software is built on code. However, in a increasingly technologized world, software affects and is affected by all sort of human activities. As a developer, you should look for synergies with these fields and understand how they relate to your work.\n\n> Cover photo by [Erin Wang](https://www.pexels.com/@erin-wang-385309)\n\n## Interdisciplinary relations make better developers\n\nThe first thing programmers learn is programming languages, algorithms, data structures and math. For a long time this might be the only learning they would do and it entails the risk of forming a bubble  around themselves. For what I know it is not uncommon for teams of developers to **lack people without technical roles**. In fact some developers (usually unexperienced) don't even want a team at all and think they can be a *one person army*.\n\nI had this kind of tendencies. It took learning the benefits of letting people influence my work or participate directly with them in a common project for my mind to change. Technical knowledge is just one piece of a whole, a single ingredient in the sandwich that any project is.\n\n### More than an auxiliary discipline\n\nIt is clear that most software applications are integrated within larger scale projects, performed by multidisciplinary teams, like:\n\n- Information systems for administrative management.\n- Forecasting systems for financial advisory.\n- Public platforms for legal procedures.\n- Applications of stylistic analysis to assist in the study of literary works.\n- Applications of weather analysis.\n- Knowledge bases for medical diagnosis.\n- A long etc.\n\nNonetheless, in all of these cases, software has an auxiliary role, because it helps in processes that belong to other disciplines in a single direction, and that's not the phenomenon of multidisciplinary that I want to address. **When I talk about synergies, I refer to a bidirectional enhancement, where your work as a programmer is improved** directly or indirectly by new ways of thinking or working.\n\n## Examples and anecdotes\n\n### Graphic design\n\nDuring the last hackathon I took part in, our team was lucky enough to count with a graphic designer that put a face to our solution. She took care of the user experience, the interface layout and the visual flow of information, with **better results that any of us could've achieved**.\n\nA less recent case. Some years ago I began working on a university project without any designers in it. When they were added to the team, the change was radical: the interface, the appearance of the avatars... There were no changes in a functional level, but thanks to these modifications **it now looks much more professional** and has since attracted many more users.\n\n_Websites, desktop applications, videogames and all kind of user interfaces take benefit of graphic design. Professional designers know how to **transmit information visually and improve the user experience of a product**, make it more appealing and intuitive._\n\n### Pedagogy\n\nMy final year dissertation has to do with an online platform for teaching programming (the same university project I mentioned earlier). Relating to programming as something to teach, as the instructor, has taught me new ways to approach to it. **The necessity to adapt complex concepts to people without as much previous knowledge challenge your understanding of such concepts** and stimulate your creativity. Without a professional teacher, like my tutor, assisting me in such a task, it would be much more difficult to get a really didactic product.\n\n_The design of a program, a videogame or a computer system also benefits from **knowing the cognitive process behind learning**, and when it is intended for children and people with disability, this role is even more important. Learning to use the software is the previous step to making it useful._\n\n### Language and literature\n\nSomething I try to do, whenever necessary, is to share the documentation of my projects, reports and presentations with people close to me that have a literary background. Even if my style is not the best, their corrections raise the quality of my text in a good measure and make it clearer and more understandable. Without necessarily knowing in depth about the subject I write about, they are able to improve the information flow, the rhythm of the text, etc.\n\nA more isolated case. One of my long term projects, like that of so many people, is to make a videogame. Since I started working on it, I've received support from several people, but the one that gives me better advice for the story is a philology graduate. In spite of not having neither programming nor videogame related knowledge, her understanding of narrative and use of aesthetic resources is much more educated than mine.\n\n_Communication skills are not something that all programmers train. **Many applications have big components of written communication** and language has all kind of influences and subtleties that may be overlooked. Sometimes we don't notice the ambiguities, mistakes, regional uses or jargon words that we employ and confuse the user. Someone who has studied language in depth is capable of **revising these texts and giving them much higher quality**_.\n\n### Some historic cases\n\nHistorically, many advances in computer science have been inspired by other sciences:\n\n- [Neural networks](https://en.wikipedia.org/wiki/Neural_network), [convolutional networks](https://en.wikipedia.org/wiki/Convolutional_neural_network) and [self-organizing maps](https://en.wikipedia.org/wiki/Self-organizing_map) are based on different aspects of the brain functioning, studied by biology.\n- The chatbot [ELIZA](https://en.wikipedia.org/wiki/ELIZA), which became an early reference of natural language processing, was inspired by a psicotherapy method.\n- [Game theory](https://en.wikipedia.org/wiki/Game_theory), which was born from the study of the behavior of economy and millitar strategy, led to a lot of artificial intelligence algorithms.\n\nIn short, to grow as a developer, it is not enough to learn about programming. The influence of the rest of the world is important too. You never know where the inspiration may come from.\n\n## Conclusion\n\nMy takeaway is not that you should learn everything about every field. That's exactly what I criticized: wanting to be a *one army person*.\n\nOften, we believe that we can take care of something we are not specialized in, and it probably would be true to a certain extent, but the result will almost surely require more effort and have a worse quality. Obviously, you also can't hire all kind of specialists for every project. The ideal is to find its key points and make an informed inspection of which human profiles could make it take off.\n\nGet surrounded by all kinds of people, be open to other disciplines and let the influence occur in a bidirectional manner. Software has much to contribute to the world, but it also needs the world to leave its mark on it.\n\n***\n\n#### Recommended reading\n\n{% post miguelmj/thoughts-on-declarative-programming-why-i-m-learning-prolog-43be %}\n\n{% post miguelmj/are-you-going-to-learn-that-ambiguity-of-programming-1kdj %}\n\n[_You can follow me on Twitter!_ 🐦](https://twitter.com/MiguelMJdev)\n",
    "positive_reactions_count": 8,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--t6nfuT9D--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvveghxfe8qzy6em10ni.jpg",
    "tag_list": [
      "gamedev",
      "webdev",
      "computerscience"
    ],
    "canonical_url": "https://dev.to/miguelmj/multidisciplinarity-what-s-there-besides-code-2en9",
    "reading_time_minutes": 5,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 580946,
    "title": "Sobre la programación declarativa - Por qué estoy aprendiendo Prolog",
    "description": "Antes de nada, quiero dejar claro que en adelante usaré lenguaje de programación declarativa para re...",
    "published": true,
    "published_at": "2021-03-24T11:42:08.041Z",
    "slug": "sobre-la-programacion-declarativa-por-que-estoy-aprendiendo-prolog-3o8c",
    "path": "/miguelmj/sobre-la-programacion-declarativa-por-que-estoy-aprendiendo-prolog-3o8c",
    "url": "https://dev.to/miguelmj/sobre-la-programacion-declarativa-por-que-estoy-aprendiendo-prolog-3o8c",
    "comments_count": 2,
    "public_reactions_count": 8,
    "page_views_count": 127,
    "published_timestamp": "2021-03-24T11:42:08Z",
    "body_markdown": "---\ncover_image: \"https://res.cloudinary.com/practicaldev/image/fetch/s--bCW2rxrp--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/5md66nn8sbe6bt33uwt0.jpeg\"\n---\n> Antes de nada, quiero dejar claro que en adelante usaré _lenguaje de programación declarativa_ para referirme a programación puramente funcional (Haskell, Miranda) y lógica (Prolog). No para lenguajes de consulta (SQL) o de marcado (XML).\n\nLa mayoría de nosotros, si no todos, comenzamos nuestro camino como programadores con un lenguaje imperativo (C, Python, JS...). De esta manera aprendemos a pensar en los algoritmos, a resolver los problemas paso por paso. \n\nEstoy de acuerdo con que ésta es la mejor forma de empezar, pero también creo que los desarrolladores deberíamos ser curiosos por naturaleza y probar nuevos enfoques. Muchos, en cambio, prefieren mantener distancias con la programación declarativa, sin entender cómo podría beneficiarles. He aquí mis opiniones al respecto.\n\n**Contenidos**\n\n<span id=\"toc\"></span>\n\n  - [¿Por qué la programación declarativa es menos popular?](#¿Por-qué-la-programación-declarativa-es-menos-popular?10)\n  - [Razones para aprender un lenguaje declarativo](#Razones-para-aprender-un-lenguaje-declarativo22)\n  - [Mi experiencia personal - Por qué he elegido Prolog](#Mi-experiencia-personal---Por-qué-he-elegido-Prolog35)\n\n<h2 id=\"¿Por-qué-la-programación-declarativa-es-menos-popular?10\">¿Por qué la programación declarativa es menos popular?</h2> \n\n1. **Los ordenadores no funcionan así**\n   Para empezar, los propios ordenadores ejecutan los programas de manera imperativa (una instrucción tras otra) y estoy bastante seguro de que siempre lo harán, porque no vivimos en una dimensión matemática donde las definiciones se aplican sin más. Por este mismo motivo, **la programación imperativa es la mejor manera de conocer el funcionamiento de tu ordenador**, cómo se compila el código a lenguaje máquina, cómo se ejecuta, etc. Estos conceptos se entienden mejor incluso aunque el lenguaje imperativo en cuestión sea interpretado.\n\n2. **Se siente como empezar de cero**\n   En mi segundo año de carrera, me dijeron que escribiera un programa en Haskell por primera vez. Al ver que **no podía utilizar asignaciones o bucles**, me sentí algo desarmado, como un principiante. La diferencia en cómo se manejan los datos y el hecho de que no comprendía del todo cómo funcionaba la ejecución (con lo que me pareció una cantidad obscena de llamadas recursivas) me bloqueó bastante en un primer momento.\n   Es completamente normal pensar _\"haría esto mucho más rápido en mi lenguaje habitual, en el que tengo mucha más experiencia y que se ajusta mejor mi manera de pensar\"_.\n\n3. **No es el estándar de la industria**\n   **Los [lenguajes más populares de 2020](https://www.northeastern.edu/graduate/blog/most-popular-programming-languages/) son imperativos**, algunos más multiparadigmáticos que otros, pero ninguno puramente declarativo. Así que, ¿para qué molestarse? Si no me conseguirá un mejor salario, ¿vale la pena?\n\n<h2 id=\"Razones-para-aprender-un-lenguaje-declarativo22\">Razones para aprender un lenguaje declarativo</h2> \n\n1. **Si mejoras en declarativo, mejoras en imperativo**\n   Y por lo que he visto y experimentado, no se aplica en la otra dirección. **El enfoque declarativo facilita ciertas buenas prácticas que no son estrictamente necesarias en el imperativo**.\n   Cuando mantenemos nuestro código limpio de los pequeños apaños que hacemos a veces, es más fácil de documentar, depurar, mantener y escalar.\n\n2. **Céntrate en el problema, escribe menos código**\n   La primera vez que escribí un programa en Python, después de años de C++, no podía creer que cientos de líneas de código se vieran reducidas a unas docenas. Pues eso no fue nada comparado a lo que sentí aprendiendo Haskell, donde esas docenas de líneas de Python pueden escribirse en menos de diez.\n   La programación lógica y la funcional toman mucho de las matemáticas, así que las definiciones son cortas, expresivas y potentes. Lo difícil es que necesitan un nivel de abstracción que requiere tiempo aprehender.\n\n3. **Haz una diferencia en tu CV**\n   Ya hemos visto que los lenguajes más populares no son los declarativos. Esto significa que hay menos desarrolladores (y aún así, sus comunidades están creciendo). Vas a encontrar programadores de Python, Java o JavaScript hasta debajo de las piedras, pero colgarse un lenguaje distinto al cinturón demuestra que **le has dedicado tiempo a salir de una zona de confort** y que has diversificado tus enfoques.\n\n<h2 id=\"Mi-experiencia-personal---Por-qué-he-elegido-Prolog35\">Mi experiencia personal - Por qué he elegido Prolog</h2> \n\nProlog tiene más de una implementación, pero yo recomiendo SWI-Prolog, disponible para Windows, Linux y Mac. Puedes probarlo online en su sitio oficial (enlace más abajo). Viene con una buena variedad de librerías y buena documentación.\n\n1. **Una curva de aprendizaje suave**\n   Ya he mencionado que mi primera experiencia con la programación declarativa fue Haskell. Es cierto que me enamoré muy pronto del lenguaje, pero pronto se volvió demasiado abstracto para mí (dichosas mónadas). Más adelante, descubrí que Prolog es más intuitivo en muchos aspectos.\n   Además, hay recursos fantásticos para aprender Prolog desde cero hasta un nivel muy decente. Conozco mejor los que están en inglés, pero he encontrado algunos en español que también parecen de muy buena calidad.\n   - En inglés\n     http://www.learnprolognow.org/\n     https://www.swi-prolog.org/ (Web oficial, documentación de librerías.\n   - En español\n     https://blog.adrianistan.eu/supertutorial-prolog\n     https://www.lawebdelprogramador.com/cursos/Prolog/index1.html\n   \n2. **Sintaxis nativa para gramáticas**\n   Personalmente, me encanta trabajar con gramáticas; son herramientas potentes y versátiles. He hecho bastante trabajo personal con Flex y Bison, así que cuando descubrí que Prolog tenía soporte nativo para gramáticas, a través de lo que llama Gramáticas de Cláusulas Definidas (Definite Clause Grammars o DCG), el flechazo fue inmediato. Tal vez no sean la mejor opción para lidiar con semánticas de alto nivel de complejidad (o sí, no lo sé), pero son más que suficientes para usos más comunes de procesado de texto.\n\n3. **Fácil de empotrar/integrar**\n   Si quieres utilizar Prolog como una especie de motor de inferencias o una manera de conectar tus aplicaciones a una base de conocimiento, en lugar del lenguaje principal, también sirve. Hay implementaciones de Prolog con interfaces para varios lenguajes, como [C](https://www.swi-prolog.org/pldoc/man?section=foreign), [C++](https://www.swi-prolog.org/pldoc/doc_for?object=section(%27packages/pl2cpp.html%27)), [Java](https://www.swi-prolog.org/pldoc/doc_for?object=section(%27packages/jpl.html%27)) o [Python](https://pypi.org/project/pylog/).\n\n***\n\n¿Cuál es tu experiencia con la programación declarativa?¿Piensas que vale la pena? ¡No dudes en comentar sobre tu lenguaje favorito o recomendar otros recursos para aprender!\n\n",
    "positive_reactions_count": 8,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--bCW2rxrp--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/5md66nn8sbe6bt33uwt0.jpeg",
    "tag_list": [
      "spanish",
      "prolog",
      "declarative",
      "career"
    ],
    "canonical_url": "https://dev.to/miguelmj/sobre-la-programacion-declarativa-por-que-estoy-aprendiendo-prolog-3o8c",
    "reading_time_minutes": 5,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 580404,
    "title": "Escapar correctamente expresiones regulares",
    "description": "Las expresiones regulares suelen ser difíciles de entender y aún más de escribir. Probablemente uno d...",
    "published": true,
    "published_at": "2021-02-21T18:22:26.157Z",
    "slug": "escapar-correctamente-expresiones-regulares-dl2",
    "path": "/miguelmj/escapar-correctamente-expresiones-regulares-dl2",
    "url": "https://dev.to/miguelmj/escapar-correctamente-expresiones-regulares-dl2",
    "comments_count": 0,
    "public_reactions_count": 2,
    "page_views_count": 609,
    "published_timestamp": "2021-02-21T18:22:26Z",
    "body_markdown": "Las expresiones regulares suelen ser difíciles de entender y aún más de escribir. Probablemente uno de los aspectos más confusos al principio son los caracteres de escape.\n\n## Cuándo y por qué escapar caracteres.\n\nLas expresiones regulares (ER para abreviar) son herramientas para buscar patrones en texto. Hay algunos caracteres con significados especiales (su explicación no es el objetivo de esta publicación) y si queremos usarlos sin significado especial, añadimos una barra invertida (`\\`) delante de ellos. A esto lo llamamos escapar un carácter. \n\n_Nótese que esto hace de `\\` un carácter especial en sí mismo._\n\nUn ejemplo simple: Una ER que coincida con `Balance de cuenta: 50$` sería `Balance de cuenta: 50\\$`.\nNo obstante, en la mayoría de los lenguajes, `\\` también es un carácter especial para los strings (además de para las ER). Por eso, el string que tendríamos que usar para construir la ER anterior, debería ser: `Balance de cuenta: 50\\\\$`.\n\n## Consejo para escapar las ER manualmente.\n\nDebemos pensar en el paso de las cadenas que buscamos a ER y de ER a string, en lugar de pensar en los pasos de string a ER y a cadena. Veamos un ejemplo:\n\n¿Y si queremos hacer coincidir `[ERR] $var tiene valor “gg”`?\n\n1. _Cadena coincidente_:\n    `[ERR] $var tiene valor “gg”`\n    \n2. A _ER_: `[`, `]`, `$` y `\"` son caracteres especiales en la ER, así que los escapamos:\n\n     `\\[ERR\\] \\$var tiene valor \\\"gg\\\"`\n\n3. A _String_: `\\` y `\"` son caracteres especiales; los escapamos:\n\n     `\\\\[ERR\\\\] \\\\$var tiene valor \\\\\\\"gg\\\\\\\"`\n\nEl punto es escribir un ejemplo de la cadena que quieres hacer coincidir y escapar, paso a paso, los caracteres especiales de la ER y el string hasta que tengas el que vas a usar en tu programa.\n\n## Escapar ER con funciones\n\n_(Enlaces a respuestas de Stack Overflow)_\n\nTambién, otra opción es escapar la ER con alguna función auxiliar. Algunos lenguajes, como [Python](https://stackoverflow.com/questions/4202538/escape-regex-special-characters-in-a-python-string) o [Java](https://stackoverflow.com/questions/60160/how-to-escape-text-for-regular-expression-in-java) ofrecen estas funciones por defecto. En otros, como [JavaScript](https://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript) o [C++](https://stackoverflow.com/questions/39228912/stdregex-escape-backslashes-in-file-path) debes definirlas por tu cuenta.\n\n**¡Atención!** Asegúrate de usar estas funciones con RE en las que no quieres caracteres especiales, porque si no tienes cuidado, puedes acabar escapando algún caracter sin querer y estropeando la ER.",
    "positive_reactions_count": 2,
    "cover_image": null,
    "tag_list": [
      "spanish",
      "regex",
      "begginers",
      "tips"
    ],
    "canonical_url": "https://dev.to/miguelmj/escapar-correctamente-expresiones-regulares-dl2",
    "reading_time_minutes": 2,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 613783,
    "title": "Making a level editor with SFML (C++) - Part 1",
    "description": "A level editor is something that I've wanted to do for a long time in SFML, but has always been delay...",
    "published": true,
    "published_at": "2021-02-21T18:21:29.919Z",
    "slug": "making-a-level-editor-with-sfml-c-part-1-2mm0",
    "path": "/miguelmj/making-a-level-editor-with-sfml-c-part-1-2mm0",
    "url": "https://dev.to/miguelmj/making-a-level-editor-with-sfml-c-part-1-2mm0",
    "comments_count": 0,
    "public_reactions_count": 6,
    "page_views_count": 460,
    "published_timestamp": "2021-02-21T18:21:29Z",
    "body_markdown": "A level editor is something that I've wanted to do for a long time in SFML, but has always been delayed. Fortunately, my last project (Candle, a library for 2D lighting), made me dive entirely into SFML again, so when I finished it, the natural thing was to start with the editor project right ahead.\n\n{% twitter 1361810747764932611 %}\n\n## The design\n\n### The GUI\n\nThere are several libraries to make GUIs in SFML. However, I didn't want to use any of them, for two reasons: first, I wanted to learn to make GUIs from scratch in order to know how to implement one in my future game; second, I may suffer a little bit of [NIH](https://en.wikipedia.org/wiki/Not_invented_here) syndrome.\n\nAnyways, the GUI I require is intended for my personal use and not very complex. The required features are:\n\n- Pannable views with resizable viewports.\n- A basic clickable menu.\n- A color picker.\n- Modularity centered around tools, so that it is easy to add new ones and scale the already implemented.\n\n### The levels\n\nThe editor will be focused on a tile world (or grid world). The levels I want to make would have the following components (note: I will be using the words component and entity, but **not** in terms of the [ECS](https://en.wikipedia.org/wiki/Entity_component_system) architecture):\n- Visual component. It will be divided in layers (maybe with parallax) and it would require tools to:\n  - Set and transform the texture of a cell.\n  - Set the color of a cell.\n  - Set and transform visual elements that are not fixed to the grid.\n  - Set and transform light sources and lighting areas (here I will use Candle).\n- Collisions component. It will require a tool to set the type of each cell, where the type can be:\n  - Solid cells.\n  - Unsolid cells.\n  - Cells with a solid slope.\n- Dynamic components. These will be the entities within the level that do not belong to the grid, that will have the following elements:\n  - A sprite, optionally animated.\n  - A collision rectangle, circle or capsule.\n  - Some basic physic properties, as velocity and bounciness.\n- Lastly, I would like to make the levels scriptable. I will be embedding Lua in the editor, so I can test directly the scripts there.\n\n# Serialization\n\nObviously, any editor would be useless if you couldn't save you work. I will use [cereal](https://uscilab.github.io/cereal/index.html) to serialize the levels and the custom assets.\n\n***\n\nWhat is your experience with SFML? Have you got any project that you want to share? Feel free to leave a comment with any library that would be useful for other people using SFML!",
    "positive_reactions_count": 6,
    "cover_image": null,
    "tag_list": [
      "cpp",
      "sfml",
      "gamedev"
    ],
    "canonical_url": "https://dev.to/miguelmj/making-a-level-editor-with-sfml-c-part-1-2mm0",
    "reading_time_minutes": 2,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 580967,
    "title": "About bilingual writers in DEV",
    "description": "Hello, DEV community. I'd like to know your opinion on users that publish in two different languages,...",
    "published": true,
    "published_at": "2021-01-24T12:49:06.067Z",
    "slug": "about-bilingual-writers-in-dev-1gn2",
    "path": "/miguelmj/about-bilingual-writers-in-dev-1gn2",
    "url": "https://dev.to/miguelmj/about-bilingual-writers-in-dev-1gn2",
    "comments_count": 8,
    "public_reactions_count": 2,
    "page_views_count": 113,
    "published_timestamp": "2021-01-24T12:49:06Z",
    "body_markdown": "Hello, DEV community. I'd like to know your opinion on users that publish in two different languages, because, for several reasons irrelevant to this post, I want to start translating my own posts to my native language (Spanish), while keeping the versions in English.\n\nAt first I wanted to do it in a Spanish-speaking community, but unfortunately, I didn't found any in which I felt as comfortable as here. Also, from the comments on the following post, I discovered that there is already Spanish speakers publishing in DEV, using the #spanish tag.\n\n{% post fblind/hay-alguna-forma-de-identificar-contenido-en-espanol-4g94 %}\n\nHowever, doing this will mean that:\n- Non spanish speakers that follow me will have posts in their feed in a language they don't understand.\n- The posts on my profile will be mixed.\n\nI know that none of this is really a big deal, but it is something I'd like to avoid as much as possible.\n\nTherefore, I would like to kindly suggest a function to specify the language of a post, the possibility to filter posts by language and the possibility to do it in a user profile.\n\nUntil then, I would like to know what are your thoughts about this. I just skip posts in another language, but because they don't appear in my own notifications, from people I follow. Do you mind posts on your feed in other languages? Would you like to see a language filter in DEV? Or is it not worth it?",
    "positive_reactions_count": 2,
    "cover_image": null,
    "tag_list": [
      "meta",
      "discuss"
    ],
    "canonical_url": "https://dev.to/miguelmj/about-bilingual-writers-in-dev-1gn2",
    "reading_time_minutes": 1,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    },
    "flare_tag": {
      "name": "discuss",
      "bg_color_hex": "#1ad643",
      "text_color_hex": "#FFFFFF"
    }
  },
  {
    "type_of": "article",
    "id": 572896,
    "title": "I made a recommendation system for Stack Overflow unanswered questions",
    "description": "Background   For me, contributing on Stack Overflow was a big step out of the comfort zone....",
    "published": true,
    "published_at": "2021-01-15T19:56:43.843Z",
    "slug": "i-made-a-recommendation-system-for-stack-overflow-unanswered-questions-280a",
    "path": "/miguelmj/i-made-a-recommendation-system-for-stack-overflow-unanswered-questions-280a",
    "url": "https://dev.to/miguelmj/i-made-a-recommendation-system-for-stack-overflow-unanswered-questions-280a",
    "comments_count": 1,
    "public_reactions_count": 8,
    "page_views_count": 405,
    "published_timestamp": "2021-01-15T19:56:43Z",
    "body_markdown": "## Background\n\nFor me, contributing on Stack Overflow was a big step out of the comfort zone. There is already so much questions answered and so many experts there, that is not easy to find questions to answer. Anyways, I managed to make my contributions and got used to the flow of the site.\n\nHowever, the activity is pretty constant, and it is easy to get lost in the amount of questions that you can’t answer, be it for lack of knowledge, time, energy or question quality. For this reason, I thought it would be cool to automate the process of searching and filtering questions, based on my previous answers. So that is what Answerable is: a recommendation system on unanswered questions on Stack Overflow.\n\n## How it works\n\n![preview](https://dev-to-uploads.s3.amazonaws.com/i/herwf9hrsro5b0pbfbpx.png)_Preview_\n\nAnswerable makes use of the [StackExchange API](https://api.stackexchange.com/) and StackOverflow RSS feeds to gather your answers on the site and use them to sort the new questions by similarity with the ones you've already answered. \n\nOptionally, it needs you to download certain information of your profile that can't be respectfully scraped, to improve the filtering of the feed.\n\n## The documentation\n\nYou can find all the relevant information in the README and the wiki of the repository, along with the contributing guidelines.\n\n## The code\n\nYou can find the repository in GitHub under the MIT License!\n\n{% github MiguelMJ/Answerable no-readme %}",
    "positive_reactions_count": 8,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--o8pfENKB--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/9brxlfcbehcjdy52lnxj.png",
    "tag_list": [
      "showdev",
      "python",
      "project"
    ],
    "canonical_url": "https://dev.to/miguelmj/i-made-a-recommendation-system-for-stack-overflow-unanswered-questions-280a",
    "reading_time_minutes": 1,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    },
    "flare_tag": {
      "name": "showdev",
      "bg_color_hex": "#091b47",
      "text_color_hex": "#b2ffe1"
    }
  },
  {
    "type_of": "article",
    "id": 553945,
    "title": "How to make an ethical crawler in Python",
    "description": "Web crawling or web scraping is the automation of the access to one or more websites, in order to ext...",
    "published": true,
    "published_at": "2020-12-27T17:19:35.847Z",
    "slug": "how-to-make-an-ethical-crawler-in-python-4o1g",
    "path": "/miguelmj/how-to-make-an-ethical-crawler-in-python-4o1g",
    "url": "https://dev.to/miguelmj/how-to-make-an-ethical-crawler-in-python-4o1g",
    "comments_count": 4,
    "public_reactions_count": 11,
    "page_views_count": 390,
    "published_timestamp": "2020-12-27T17:19:35Z",
    "body_markdown": "**Web crawling** or **web scraping** is the automation of the access to one or more websites, in order to extract (scrape) data from them. With a high level language like Python, it can even be done easily, but there are some considerations to be taken into account.\n\n> Cover image by Chase McBride from Pexels\n\nI assume you know what web crawling is and have basic knowledge about how to make http requests in Python.\n\n## Practise ethical web scraping\n\nThere's a risk in web scraping: it can be harsh for web servers. Automated requests can saturate them, so **it's not rare that administrators put some measures to prevent scraping in their sites**, to the point of blocking certain user agent or IP address. For this reason, it is very important to do it carefully. \n\nOur solution will be a `get` function to wrap `requests.get`  and implement some respectful practices.\n\n## Imports\n\nHere are the main libraries that we will use in our ethical web crawler.\n\n```python\nimport pathlib  # to manage the filesystem\nimport requests # to make http requests\nfrom time import sleep # for the delays\n\nfrom urllib.robotparser import RobotFileParser # to parse robots.txt\nfrom urllib.parse import urlparse # to parse urls\n```\n\n## False Responses\n\nFirst of all, we need a new class to replace HTTP responses in some cases. For our needs, we will only give it the fields of `status_code` and `content`.\n\n```python\nclass FalseResponse:\n    def __init__(self, code, content):\n        self.status_code = code\n        self.content = content\n```\n\n\n## Make sure you are allowed\n\nWe also need to write a function `ask_robots` to check the [robots.txt](https://en.wikipedia.org/wiki/Robots_exclusion_standard) file of the site before a petition. This way we know if the admins allow our bot to crawl a specific url. We will keep visited files in `_rp` in case we check the same robots.txt more than once.\n\n```python\n_rp = {}\n\ndef ask_robots(url: str, useragent=\"*\": str) -> bool:\n    url_struct = urlparse(url)\n    base = url_struct.netloc\n    # look up in the cache or update it\n    if base not in _rp:\n        _rp[base] = RobotFileParser()\n        _rp[base].set_url(url_struct.scheme + \"://\" + base + \"/robots.txt\")\n        _rp[base].read()\n    return _rp[base].can_fetch(useragent, url)\n```\nThe default useragent is `\"*\"`, which looks for rules applied to all crawlers (sometimes specific crawlers have specific rules).\n## The `get` function\n\nNow we have what we need to specify our main function.\n\nI will write each chunk of the function followed by a little explanation.\n\n### Arguments\n\n```python\ndef get(url: str, use_cache=True: bool, delay=2: int):\n    useragent = \"My Crawler\"\n```\n\n1. `url`. The URL you want to get.\n2. `use_cache`. Flag to allow the program to reuse previous responses instead of making a new one.\n3. `delay`. Time in seconds to wait before a request, to avoid saturating the servers if we make more than one. \n\n### Check your own cache\n\n```python\n    # If a cached answer exists and is acceptable, then return the cached one.\n    url_cache = pathlib.Path.cwd() / \"cache\" / url.replace(\"/\", \"_\")\n    if use_cache and url_cache.exists():\n        with open(url_cache, \"r\") as fh:\n            res = fh.read().replace(\"\\\\r\\\\n\", \"\")\n        return FalseResponse(200, res)\n```\n\nIf the user has allowed the program to use a cached response, then look up a directory called `cache` where the previous responses are stored and return that.\n\n### Ask the robots.txt\n\n```python\n    # If the robots.txt doesn't allow the scraping, return forbidden status\n    if not ask_robots(url, useragent):\n        return FalseResponse(403, \"robots.txt forbids it\")\n```\n\nNow we use the function we defined earlier. If the robots.txt file excludes the desired URL, we use a status code of `403`, to express that although the content exists, the retrieval is not allowed for this user (in this case, the crawler).\n\n### Wait and make the request\n\n```python\n    # Make the request after the specified delay\n    headers = {\"User-Agent\": useragent}\n    sleep(delay)\n    res = requests.get(url, timeout=10, headers=headers)\n\n```\n\nWe identify our crawler before making the request using the User-Agent header and wait the specified time before it. \n\n### Stop if told so\n\n```python\n    # Exit the program if the scraping was penalized\n    if res.status_code == 429:  # too many requests\n        exit()\n\n```\n\nOverwhelmed servers may return a code `429` to tell you that you have done too many requests in too little time. Usually these responses include a `Retry-After` header to tell us how much to wait before a new request. You can use it to try again, but to keep this example simple, we just exit the program. \n\n### Store the response and return it\n\n```python\n    # Cache the response if allowed by user\n    if use_cache:\n        url_cache.parent.mkdir(parents=True, exist_ok=True)\n        with open(url_cache, \"w\") as fh:\n            fh.write(res.content.decode(res.encoding))\n\n    return res\n```\n\nAgain, if the user allowed the use of a cache, we write to it using the same path as before.\n\n## Conclusion\n\nThis is a generic approach, but it can be used as a base for crawlers with more concrete needs.\n\nThis way, we avoid forbidden scraping, unnecessary redundant petitions and optimize traffic. If you practise ethical web-scraping, you will make the work of maintainers easier and will be able to scrape your data with a clean conscience.\n\n## Reference\n\n[A Guide to Ethical Web Scraping](https://www.empiricaldata.org/dataladyblog/a-guide-to-ethical-web-scraping) ",
    "positive_reactions_count": 11,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--R6VQ5I5p--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/xjzg7g4wua72ahftgs5t.jpg",
    "tag_list": [
      "python",
      "tutorial",
      "webscraping",
      "web"
    ],
    "canonical_url": "https://dev.to/miguelmj/how-to-make-an-ethical-crawler-in-python-4o1g",
    "reading_time_minutes": 4,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 544351,
    "title": "Are one liners always pythonic?",
    "description": "First of all, if you don't know what pythonic means, see this question.   I love clean code as much...",
    "published": true,
    "published_at": "2020-12-16T14:29:51.530Z",
    "slug": "are-one-liners-always-pythonic-552n",
    "path": "/miguelmj/are-one-liners-always-pythonic-552n",
    "url": "https://dev.to/miguelmj/are-one-liners-always-pythonic-552n",
    "comments_count": 19,
    "public_reactions_count": 6,
    "page_views_count": 506,
    "published_timestamp": "2020-12-16T14:29:51Z",
    "body_markdown": "> First of all, if you don't know what pythonic means, see [this question](https://stackoverflow.com/questions/25011078/what-does-pythonic-mean).\n\nI love clean code as much as anyone, but I think we all agree that there should be a limit on how much you put on a single line of code.\n\nFor example, looking at some examples on the [Python wiki](https://wiki.python.org/moin/Powerful%20Python%20One-Liners) I came across elegant one liners like:\n```python\n# Palindrome Python One-Liner\nphrase.find(phrase[::-1])\n\n# Find indices of x in a list lst\nindices = [i for i in range(len(lst)) if lst[i]==x]\n```\nbut also some others that I don't find that much clean:\n```python\n# Quicksort Python One-liner\nlambda L: [] if L==[] else qsort([x for x in L[1:] if x< L[0]]) + L[0:1] + qsort([x for x in L[1:] if x>=L[0]])\n```\nDo you have any criteria to limit your one-liners? Or don't you mind about the length of a line as long as it does the work?",
    "positive_reactions_count": 6,
    "cover_image": null,
    "tag_list": [
      "discuss",
      "python",
      "codequality"
    ],
    "canonical_url": "https://dev.to/miguelmj/are-one-liners-always-pythonic-552n",
    "reading_time_minutes": 1,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    },
    "flare_tag": {
      "name": "discuss",
      "bg_color_hex": "#1ad643",
      "text_color_hex": "#FFFFFF"
    }
  },
  {
    "type_of": "article",
    "id": 532786,
    "title": "Why and how to use pen and paper - Designing algorithms with no code",
    "description": "It's a common thing to see programming students staring silently at their code editor, with a blank l...",
    "published": true,
    "published_at": "2020-12-13T16:48:19.660Z",
    "slug": "why-and-how-to-use-pen-and-paper-design-an-algorithm-11nn",
    "path": "/miguelmj/why-and-how-to-use-pen-and-paper-design-an-algorithm-11nn",
    "url": "https://dev.to/miguelmj/why-and-how-to-use-pen-and-paper-design-an-algorithm-11nn",
    "comments_count": 3,
    "public_reactions_count": 7,
    "page_views_count": 574,
    "published_timestamp": "2020-12-13T16:48:19Z",
    "body_markdown": "It's a common thing to see programming students staring silently at their code editor, with a blank look in their eyes, not knowing where to start when they are given an assignment. Although most teachers say _\"pick up pen and paper before programming\"_, there is a reason why some just don't do it: mostly because they don't know why or how.\n\nSo, how important is to _\"pick up pen and paper\"_?\n\n## Your coding skills will always be limited by your problem solving skills\n\nProgramming is, by definition, designing a solution. In most cases this means designing an algorithm (sorry, declarative programming). \n\nTo be a great programmer, it is more important to develop your ability to solve problems algorithmically and think abstractly about data than to know perfectly the syntax of any language. It will let you deconstruct the problem and solve it with whatever tools you have.\n\n## How does it help using pen and paper?\n\nIn pseudocode, a flowchart or a drawing, data need no type, there are no syntax errors and you can focus on what you have and what you want, with the level of abstraction you need.\n\n### Our minds understand visual information better\n\nWith code, it happens like with mathematical language. Our brain knows how to interpret images almost directly, but needs some more resources to interpret code or math.\n\n**Intersection of two sets**\n\n| Math | Image |\n| :---: | :---: |\n| {% katex %} A \\cap B = \\\\{ x : x \\in A, x \\in B \\\\} {% endkatex %} | ![Intersection Wikimedia](https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Set_intersection.svg/1280px-Set_intersection.svg.png)[*Source: Wikimedia*](https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Set_intersection.svg/1280px-Set_intersection.svg.png) |\n\nThe process your mind takes to understand the image is much shorter than to understand the expression.\n\n### That applies to programming too\n\n- The same happens when actively creating something. **It's easier for you to come up with a solution** while using your eyes and hands on the paper than directly trying to express it in code.\n\n- Furthermore, when you design before writing, **you can debug more easily**. The design offers you a panoramic view of the algorithm, which you can contrast with the code in successive iterations, to recognize the nature of the error.\n\nIf you're already convinced to pick up that pen and paper, you might find useful some tips for the process.\n\n## Some guidelines on how to think when designing an algorithm\n\nThere are several ways to do this. In fact, Software Engineering offers a lot of different models on how to design software and abstract architectures to approach a lot of different problems. Here I want to give a very generic method, on which almost any other process is based.\n\n### Thinking on the data representation\n\n- **What information do you have and how you want/need to represent it?** Are you going to use predefined types or structures of the language? Do you need to define your own?\n\n    - _Draw some examples of the data and let your brain perceive the gaps or redundancies._\n\n- **What are the basic operations you can perform on this information?** You should be clear on what transformations you can apply to your data.\n\n    - _In many languages the most basic is asignation. Be sure to understand how it works. The rest usually depends on whether it is a number, a string, a collection, an object, etc_\n\n    - _You will be able to use these basic operations as the building blocks of your algorithm._\n\n### Thinking on the process\n \nThese are not sequential steps, but separate advice to develop your solutions.\n\n- Before even trying to define the algorithm, it is better to **have some examples of input and output**. For this you can also specify some preconditions and postconditions: What is true before the algorithm is executed? What must be true after the algorithm is executed?\n\n    - _If the algorithm depends on some arguments, pay special attention to them. Also, what useful information can you extract from them? Write that down too, if you think it will be worhtwhile._\n\n- **You don't need to think it straight from the first to the last step**. Sometimes the last part of the algorithm is clearer than the first one. Go ahead and specify its latter part, and then focus on how to get to that point.\n\n    - _Write or draw the steps you see clearly, try to connect them and fill the missing steps to finish._\n\n- **Divide the problem into subproblems** until you are able to solve them with your basic operations. You can write first a high-level pseudocode or flow-chart version of the solution, and then go through each step, decomposing it into more steps.\n    - _If you think you have more than one option, you can even specify various solutions and try them in code, to see if one works better than another._\n\n## Conclusion\n\nDifferent minds deal better with different methods, but in the end, learning and practising are the two only ways to improve. \n\nThere is a direct synergy between solving problems and programming, but always remember: __the solution can exist without the code; the code can't exist without the solution.__\n\n***\nDo you have any advice for writing better code and designing algorithms more efficiently? I'll be glad to read your comments on this topic!",
    "positive_reactions_count": 7,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--YawMQMyc--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/zpdndwke3gyxq7xzq6wf.jpeg",
    "tag_list": [
      "beginners",
      "codenewbie",
      "productivity",
      "codequality"
    ],
    "canonical_url": "https://dev.to/miguelmj/why-and-how-to-use-pen-and-paper-design-an-algorithm-11nn",
    "reading_time_minutes": 4,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 538730,
    "title": "Writing a Conversational User Interface Library - Full Series",
    "description": "For the last months, I've been writing this series on the development of JTASCHE (Java Text Adventure...",
    "published": true,
    "published_at": "2020-12-10T17:23:14.639Z",
    "slug": "writing-a-conversational-user-interface-library-full-series-3dc5",
    "path": "/miguelmj/writing-a-conversational-user-interface-library-full-series-3dc5",
    "url": "https://dev.to/miguelmj/writing-a-conversational-user-interface-library-full-series-3dc5",
    "comments_count": 0,
    "public_reactions_count": 5,
    "page_views_count": 88,
    "published_timestamp": "2020-12-10T17:23:14Z",
    "body_markdown": "---\nlayout: post\ntitle: Writing a Conversational User Interface Library - Full Series\nauthor: Miguel MJ\n---\nFor the last months, I've been writing this series on the development of JTASCHE (Java Text Adventure and Simple Chatbot Engine). This post is meant to merge all the chapters. I don't expect anyone to read it all... maybe someone will find a cool idea or some inspiration, but the real purpose to publish it is to unify this journal in a single file.\n\n**Table of contents**\n\n<span id=\"toc\"></span>\n\n- [1. The idea](#The-idea12)\n- [2. The design](#The-design26)\n    - [General description](#General-description30)\n    - [Requisites](#Requisites34)\n      - [Input](#Input36)\n      - [Output](#Output42)\n      - [Internal state](#Internal-state48)\n      - [Dialogue flow format](#Dialogue-flow-format54)\n    - [Synopsis](#Synopsis60)\n- [3. Regular Expressions for I/O](#Regular-Expressions-for-I/O80)\n    - [Regular expressions in Java](#Regular-expressions-in-Java84)\n    - [Setting up the project](#Setting-up-the-project90)\n    - [A custom Pattern class](#A-custom-Pattern-class100)\n    - [Testing](#Testing108)\n    - [Conclusion](#Conclusion135)\n- [4. Scripting Language for Inner State](#Scripting-Language-for-Inner-State141)\n    - [Jython](#Jython147)\n      - [Embed it to the project](#Embed-it-to-the-project151)\n    - [Script class](#Script-class155)\n    - [Testing](#Testing173)\n    - [Conclusion](#Conclusion204)\n- [5. Structures](#Structures212)\n      - [Some notation](#Some-notation224)\n    - [The `Response` class](#The-`Response`-class229)\n      - [Valid responses](#Valid-responses237)\n      - [Simple response](#Simple-response249)\n      - [Recursive Response](#Recursive-Response267)\n    - [The `Module` class](#The-`Module`-class290)\n    - [The `CUI` class ](#The-`CUI`-class-298)\n    - [Conclusion](#Conclusion306)\n- [6. Serialization of the dialogue flow](#Serialization-of-the-dialogue-flow312)\n    - [GSON](#GSON316)\n  - [Intermediate classes for serialization](#Intermediate-classes-for-serialization322)\n    - [`SerializableResponse`](#`SerializableResponse`326)\n      - [Java to JSON](#Java-to-JSON344)\n      - [JSON to Java](#JSON-to-Java361)\n    - [`SerializableModule`](#`SerializableModule`387)\n  - [Load and save a `CUI`](#Load-and-save-a-`CUI`401)\n  - [Let's see a basic example](#Let's-see-a-basic-example405)\n  - [Conclusion](#Conclusion437)\n- [7.  Variables and Placeholders](#Variables-and-Placeholders445)\n  - [Regex Named Capturing Groups in Java](#Regex-Named-Capturing-Groups-in-Java463)\n      - [Backreferencing](#Backreferencing492)\n  - [Variables and placeholders](#Variables-and-placeholders514)\n  - [Implementation](#Implementation536)\n    - [Preprocessing the string to build a Pattern - I used the regex to preprocess the regex](#Preprocessing-the-string-to-build-a-Pattern---I-used-the-regex-to-preprocess-the-regex546)\n    - [Pattern regeneration - Variable replacement](#Pattern-regeneration---Variable-replacement596)\n      - [In Matching](#In-Matching619)\n      - [In Generation](#In-Generation650)\n  - [Conclusion](#Conclusion667)\n- [8. Adapted Regular Expressions](#Adapted-Regular-Expressions675)\n  - [Features](#Features681)\n  - [RegexAdapter class](#RegexAdapter-class712)\n      - [Example](#Example771)\n  - [Conclusion and revision](#Conclusion-and-revision793)\n- [Closing the project](#Closing-the-project811)\n\n\n<h1 id=\"The-idea12\">1. The idea<small><a href=\"#toc\">  [TOC]</a></small></h1> \n\nOne of the things that caught my attention before I started studying Computer Science were **chatbots**. I'd always loved the idea of speaking to machines, but the quality of real chatbots obviously wouldn't be up the incredible AIs of sci-fi movies.\n\nWhen I learnt the two main approaches to chatbot-like applications used today, machine learning based and rule based, I knew I had the spirit but lacked the skills to follow the first one. Therefore, I did my research on the second one and found AIML.\n\nYet, as time passed, I started to become more and more interested in developing my own tool, rather than the chatbot itself. I wanted to make something at least as powerful as AIML and hopefully better.\n\nAfter a year or two, between studies and other projects, I managed to finish the first version of TASCHE (link below), a library to design dialogue flows in JSON, a custom format for the patterns and a custom pseudolanguage to modify its internal state. It was not as great as my first-year-in-uni self would dream, but it worked and was definitely set on the right path.\n\nAs I was still learning during the process, it suffered a lot of transformations. It's enough to say that the first pattern parser was written from scratch in several thousand lines of code, before being replaced by a more legible Flex + Bison version. I wrote it in C++ because its my main language and I needed to focus on the structures and algorithms. Now, five years after the first draft, I've chosen Java to rewrite it and try to improve it in the process.\n\nI'll keep this series to explain the internals of TASCHE and its evolution. I think my first-year-in-uni self will enjoy it.\n\n<h1 id=\"The-design26\">2. The design<small><a href=\"#toc\">  [TOC]</a></small></h1> \n\nBefore we properly start to code, we must define the requisites of the project to have a general understanding of what we have to implement and how we plan to do it.\n\n<h3 id=\"General-description30\">General description</h3> \n\nThe Conversational Interface Library will provide the user with a **Conversational User Interface** (CUI from now) class. A CUI must be able to load a dialogue flow specified by the user and answer their input according to it, modifying its internal state if it's necessary. It can be thought of as an automaton.\n\n<h3 id=\"Requisites34\">Requisites</h3> \n\n<h4 id=\"Input36\">Input</h4> \n\nWhen we think about user input, we have to always assume that we won't consider all the possibilities. Anyways, we want to consider as many as possible in the shortest specification we can.\n\nThe most powerful tool we have to do this are regular expressions. But, as regular expressions can sometimes be a little too complicated, we will think about creating a simpler format, easier for the user, that translates underneath to a regular expression.\n\n<h4 id=\"Output42\">Output</h4> \n\nIf we want a chatbot to feel as natural as possible, diversity of answers is a must. For this we will not only use a list of possible expressions to randomly choose from, but we will also group many different answers with little variations in the same expression.\n\nAgain, we can use regular expressions to generate strings. This is not their usual purpose, but there are libraries that allow as to do it.\n\n<h4 id=\"Internal-state48\">Internal state</h4> \n\nThe internal state of the chatbot creates the context of the conversation, so for the same input, different output comes depending on what's been said earlier.\n\nThe most flexible and powerful way to contain and modify the internal state is to use an embedded scripting language.\n\n<h4 id=\"Dialogue-flow-format54\">Dialogue flow format</h4> \n\nThe dialogue flow then must associate input and state with a list of possible answers and state modifications. The ideal format would be one legible, without redundant information (except when it's for clarity) and customizable.\n\nWe will design a structure to contain the proper dialogue flow and use JSON to store it.\n\n<h3 id=\"Synopsis60\">Synopsis</h3> \n\nFrom all we've said, the following specifications are extracted:\n\nWe will use\n\n- regular expressions for input matching.\n\n- regular expressions for output generation.\n\n- optional simplification of regular expressions for the user.\n\n- scripting language for internal state representation and modification.\n\n- custom data structure to associate input, state and output.\n\n- JSON to store such structure.\n\nThe first implementation I did in C++ (see [Part 1 of this series](https://dev.to/miguelmj/writing-my-conversational-interface-library-part-1-1jh3)) used its own version, built from scratch, of most of these features. But this time I'll find out what Java libraries I can use for the same purpose, because once you've reinvented the wheel in order to learn (which is a noble cause), you should use professionally built, tested and maintained wheels. That will reduce the effort you need to build, test and maintain your project.\n\n<h1 id=\"Regular-Expressions-for-I/O80\">3. Regular Expressions for I/O<small><a href=\"#toc\">  [TOC]</a></small></h1> \n\nIn the [last post](https://dev.to/miguelmj/writing-a-conversational-interface-library-part-2-2iad) we defined the requisites of the project. I started in order and began with the input and output based on regular expressions.\n\n<h3 id=\"Regular-expressions-in-Java84\">Regular expressions in Java</h3> \n\nRegular expressions are supported in Java with the package [java.util.regex](https://docs.oracle.com/javase/8/docs/api/index.html?java/util/regex/package-summary.html). Its usage is pretty straightforward for the pattern matching, but does not support string generation.\n\nAs usual, someone had already asked [what I needed to know]((https://stackoverflow.com/a/22133/8757033)) in stackoverflow, and thus I found the library [Generex](https://github.com/mifmif/Generex/), _a Java library for generating String from a regular expression_.\n\n<h3 id=\"Setting-up-the-project90\">Setting up the project</h3> \n\nAlmost always I prefer to work from the terminal. I strongly believe that being able to manage your code without an IDE gives you better understanding of the underlying processes of compiling and debugging. Still, I am not going to refuse the facility of an IDE if what I care about is that the project moves forward.\n\n- At first, I tried to build Generex from source, but I'm not familiar with this process in Java and it looked like more effort than it was worth, so I decided to go with Maven.\n\n- I tried to use Maven from the command line. I read some tutorials and got a Hello World compiled, but again I had problems using the dependencies for the real project.\n\n- What I had to do was clear; I didn't switch from C++ to Java to complicate my life, so I launched Eclipse, imported the Maven project([1](https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html))([2](https://www.tutorialspoint.com/maven/maven_eclispe_ide.htm)) and had Generex up and running in seconds.\n\n<h3 id=\"A-custom-Pattern-class100\">A custom Pattern class</h3> \n\nOnce with my work environment ready, I created a `Pattern` class. Initially I debated whether it was necessary to make a unified class for the input and output patterns, instead of a separate one for each, but I came to the conclusion that for now I needed simplicity and in the end there was not a big conceptual difference.\n\nThis class contained a `java.util.regex.Pattern` for the matching and a `Generex` for the generation. I was worried I was using more memory than necesary ,given that I won't be using them at the same time, but again, I followed this quote whose author I never remember:\n\n> Is easier to optimize clean code than to clean optimized code.\n\n<h3 id=\"Testing108\">Testing</h3> \n\nI have not used JUnit before, so I was glad to discover it's not a big deal. I prepared a single test to check that a simple `Pattern` could generate different strings, and match them all as true.\n\nThe regular expression used for the test is:\n\n```\n(Hi|Hello), how are you( today)?\\?\n\n```\n\nand everything went well, as the output shows (`[OK]` means that the pattern matched the generated string).\n\n```\nGenerated: Hi, how are you today?[OK]\nGenerated: Hello, how are you?[OK]\nGenerated: Hi, how are you today?[OK]\nGenerated: Hello, how are you?[OK]\nGenerated: Hi, how are you?[OK]\nGenerated: Hi, how are you today?[OK]\nGenerated: Hello, how are you today?[OK]\nGenerated: Hi, how are you today?[OK]\nGenerated: Hello, how are you?[OK]\nGenerated: Hello, how are you?[OK]\n\n```\n\n<h3 id=\"Conclusion135\">Conclusion</h3> \n\nThis was still the easy part and I didn't really expect the test to fail, but this kind of motivation is important, even in the beginning.\n\nI decided to name this project JTASCHE, to make the difference with TASCHE. The code is available on GitHub.\n\n<h1 id=\"Scripting-Language-for-Inner-State141\">4. Scripting Language for Inner State<small><a href=\"#toc\">  [TOC]</a></small></h1> \n\nIn the last post we made `Pattern`, a class to recognize input and produce output. Now we'll make another one that let us interact with the inner state of the CUI.\n\nAs we decided during the design, we will contain and modify the inner state via an embedded scripting language. Java supports [several scripting languages](https://java-source.net/open-source/scripting-languages) and for this project we'll be using [Jython](https://www.jython.org/).\n\n<h3 id=\"Jython147\">Jython</h3> \n\nAs its official page says, _Jython is a Java implementation of Python that combines expressive power with clarity_. Its advantages are that it's super easy to embed in Java and the simplicity of the Python language. The main downside is that the last Python supported version is the 2.7, which is [not currently mantained](https://pythonclock.org/). As this is a hobby project, I won't take that on count, but in a different case I would probably consider another option (e.g. I'd like to embed Lua in the original TASCHE).\n\n<h4 id=\"Embed-it-to-the-project151\">Embed it to the project</h4> \n\nThe normal version of Jython requires it installed in your machine, but there is a stand-alone version which runs on its own and can be added as a simple Maven dependency (as we did with Generex in the last part). We'll be using that one.\n\n<h3 id=\"Script-class155\">Script class</h3> \n\nIn our library, there are two main purposes for the `Script` class:\n\n1. Check a condition against the inner state.\n\n2. Modify the inner state.\n\nSo the structure of this class is pretty straightforward. We have:\n\n- A static reference to the `PythonInterpreter` that contains the inner state.\n\n- A `String` that contains the code of the script.\n\n- A function to evaluate it as a boolean (with the Jython `__nonzero__` function).\n\n- A function to simply execute the code.\n\n<h3 id=\"Testing173\">Testing</h3> \n\n```Java\n// A SUCCESSFUL TEST\nScript[] scripts = new Script[10];\nScript.pyMachine.exec(\"a = 5; b=3; c='hola'\");\n// this should eval true\nscripts[0] = new Script(\"a == 5\");\nscripts[1] = new Script(\"b ==3\");\nscripts[2] = new Script(\"c[b] == 'a'\");\nscripts[3] = new Script(\"'0'\");\nscripts[4] = new Script(\"1\");\n// this should eval false\nscripts[5] = new Script(\"a==b\");\nscripts[6] = new Script(\"h=4;False\");\nscripts[7] = new Script(\"c[0]=='o'\");\nscripts[8] = new Script(\"0\");\nscripts[9] = new Script(\"''\");\n\t\nboolean ok = true; int i=0;\nfor(Script s: scripts) {\n\tboolean ev = s.evaluate();\n\tok &= i++ < 5 == ev;\n}\n\n```\n\nAs this class is mainly a wrapper of Jython's `PyCode`, there was little to test but the basic functionality. The only thing worth mentioning is that, as intuitive as it may sound, the state of the `PythonInterpreter` object persists between different `Scripts` executions and evaluations.\n\n_Note that if, in the future, we wanted to have different Conversational Interfaces running with different inner states (be it sequentially or concurrently), we would have to set the static instance before executing/evaluating any script._\n\n<h3 id=\"Conclusion204\">Conclusion</h3> \n\nNow with our `Pattern` and `Script` classes we have the basic building blocks to define a structure that associates input and conditions to output and state changes. From now we won't rely much more in third-party libraries (except Gson, which I'll explain).\n\nAfter we have this structure, we will be able to write dialogue flow examples to test some new features like patterns modifying the inner state and possibly the regex simplification we planned during the design.\n\nDon't forget to check the repository for the code!\n\n<h1 id=\"Structures212\">5. Structures<small><a href=\"#toc\">  [TOC]</a></small></h1> \n\nThe classes we've got right now are `Pattern`, for matching input and producing output, and `Script` for checking and modifying the inner state of the CUI. With these two, we want to make a structure that:\n\n1. Receives user input.\n2. Matches it against a pattern.\n3. Checks a condition in the inner state.\n4. If the input matches and the condition is satisfied, it either:\n\n  - **a)** Produces some output and executes a change in the state. \n  - **b)** Processes the input further until it gets to produce an output or discard the response.\n\n<h4 id=\"Some-notation224\">Some notation</h4> \n\n- We will call **question** to the user input, that the `Response` tries to match.\n- Given a question, a `Response` is **valid** when the question matches the input pattern and the condition is satisfied.\n\n<h3 id=\"The-`Response`-class229\">The `Response` class</h3> \n\nWe'll make a base `Response` class, which performs the first three steps and `SimpleResponse` and `RecursiveResponse`, that derive from it and implement an `answer` function, respectively for a options **a)** and **b)**.\n\n![Response hierarchy](https://dev-to-uploads.s3.amazonaws.com/i/hldnz786g1lm9u4m0zr2.png)\n\n_Note that the return type of the `answer` function is an `Optional`, because if the `question` is not valid, the function should not return anything._\n\n<h4 id=\"Valid-responses237\">Valid responses</h4> \n\n```Java\npublic boolean isValid(String question) {\n  return (input == null     || input.matches(question)) &&\n         (condition == null || condition.evaluate());\n}\n\n```\n\nWe will use null input patterns for responses that should adapt to any question and null conditions for responses that should not depend on the inner state.\n\n<h4 id=\"Simple-response249\">Simple response</h4> \n\nThe algorithm that `SimpleResponse` uses to answer a question is:\n\n```Java\npublic Optional<String> answer(String question) {\n    Optional<String> ans = Optional.empty();\n    if(isValid(question)){\n        ans = Optional.of(output.generate());\n        if(execute != null) execute.execute();\n    }\n    return ans;\n}\n\n```\n\nThe `execute` script doesn't need to be present, but the output pattern can't be null, as something needs to be returned, even if it's an empty string.\n\n<h4 id=\"Recursive-Response267\">Recursive Response</h4> \n\nThe algorithm used by a `RecursiveResponse`, instead, is:\n\n```Java\npublic Optional<String> answer(String question) {\n    Optional <String> ans = Optional.empty();\n    if(isValid(question)) {\n        if(new_question != null) {\n            question = new_question;\n        }\n        for(Response response : responses) {\n            ans = response.answer(question);\n            if(ans.isPresent()) break;\n        }\n    }\n    return ans;\n}\n\n```\n\nIn this case, the first sub-response able to answer the question will be the only one returned. This could be tweaked later, to enable recursive responses that append all possible answers, but for now we'll leave it this way.\n\n<h3 id=\"The-`Module`-class290\">The `Module` class</h3> \n\nWe may want a default value for certain variables the first time we check a condition or define some useful functions to avoid repeating code. The `Module` class will be used to group a set of responses that can be related or use the same variables of the inner state, and also include a initialization script to run before any of its `Response`s is used.\n\n![Module class](https://dev-to-uploads.s3.amazonaws.com/i/qgqvo6t4zekbzme3dgrp.png)\n\nThe `answer` method behaves the same way as the one from `RecursiveResponse`.\n\n<h3 id=\"The-`CUI`-class-298\">The `CUI` class </h3> \n\nAt last, we can create the CUI class, which is no more than a collection of `Module`s and a `PythonInterpreter` to set the static reference of the `Script`, which we explained in [the last part](https://dev.to/miguelmj/writing-a-conversational-user-interface-scripting-language-for-inner-state-49ll#script-class).\n\n![CUI class](https://dev-to-uploads.s3.amazonaws.com/i/hlyqq2349s0fp0g7t2id.png)\n\nThe `answer` function in this class doesn't return a `Optional` because defaults any response to an empty string, and appends the result of calling `answer` on every one of its modules when they don't return an empty `Optional`.\n\n<h3 id=\"Conclusion306\">Conclusion</h3> \n\nNow we have the structures and the logic necessary for the basic functionality of our library! The following step to take will be to implement the serialization and deserialization of these structures, which will be done to a JSON format via the GSON library.\n\nThe real code is on GitHub, if you want to check it and star the project if you like it!\n\n<h1 id=\"Serialization-of-the-dialogue-flow312\">6. Serialization of the dialogue flow<small><a href=\"#toc\">  [TOC]</a></small></h1> \n\nIn the last post we defined the structures which contain the logic and data for the basic behaviour of a Conversational User Interface, which were `SimpleResponse`, `RecursiveResponse`, `Module` and `CUI`. But unless we want to hard code their content in every application, we need to serialize and deserialize them.\n\n<h3 id=\"GSON316\">GSON</h3> \n\nWe are going to store our data in JSON format, so we'll make use of the [GSON](https://github.com/google/gson) _a Java serialization/deserialization library to convert Java Objects into JSON and back_, devolped by Google. As we did before with Generex and Jython, we just have to add the dependency to the `pom.xml` file of our Maven project and it will be ready to use.\n\nGSON is a flexible and powerful library that could take [more than one post](https://www.tutorialspoint.com/gson/index.htm) to explain. Honestly, I didn't dive much into it, so I'm pretty sure there are better ways to do what I'm about to explain, but my task was not that complicated, so this solution is still flexible and open to future adaptations.\n\n<h2 id=\"Intermediate-classes-for-serialization322\">Intermediate classes for serialization</h2> \n\nDue to their complexity, our `Response` and `Module` classes can't be serialized directly by GSON, so the simplest way I came up with to deal with that was to make a serializable version of each one (`SerializableResponse` and `SerializableModule`) as an intermediary. \n\n<h3 id=\"`SerializableResponse`326\">`SerializableResponse`</h3> \n\nThis class just holds the `String` version of all possible attributes from each child of `Response`, which are:\n\n```Java\nclass SerializableResponse{\n  public String input; // both\n  public String output; // SimpleResponse\n  public String condition; // both\n  public String execute; // SimpleResponse\n  public String new_question; // RecursiveResponse\n  public List<SerializableResponse> responses; // RecursiveResponse\n\n  public Response getResponse(){...}\n}\n\n```\n\n<h4 id=\"Java-to-JSON344\">Java to JSON</h4> \n\nThe `Response` class needs a new abstract function `SerializableResponse serializable()` that will be implemented for each child and only has to fill each attribute of the serializable calling `toString()`.\n\n**Note** that:\n\n- In the case of the `Script`s, `PyCode` from Jython doesn't keep the code string, so we have to modify our class to do it in order to return it in its `toString` function.\n\n- In the `RecursiveResponse` attribute `responses` this is a recursive call.\n\nNow to serialize a `Response` we only need to do:\n\n```Java\njsonString = gson.toJson(myResponse.serializable());\n\n```\n\n<h4 id=\"JSON-to-Java361\">JSON to Java</h4> \n\nNow we use the `SerializableResponse` kind of like a factory, with a function `Response getResponse()`. The only thing we have to do to discern wehter  to return a `SimpleResponse` or a `RecursiveResponse` is:\n\n```Java\n// SerializableResponse getResponse\nif (this.output != null){ // SimpleResponse (we allow this.execute to be null)\n  // build a SimpleResponse with the string attributes\n  // and return it\n}else if(this.responses != null){ // RecursiveResponse (we allow new_question to be null)\n  // build a RecursiveResponse with the string attributes\n  // and return it\n}else{\n  // error\n}\n\n```\n\n\nAnd so, to deserialize a `Response` we only have to:\n\n```Java\nResponse myResponse = gson(jsonString ,SerializableResponse.class).getResponse();\n\n```\n\n<h3 id=\"`SerializableModule`387\">`SerializableModule`</h3> \n\nAs you may be already expecting, this class is just a list of `SerializableResponse`s and a single additional `String` for the initialization script.\n\n```Java\nclass SerializableModule{\n  public String init;\n  public List<SerializableResponse> responses;\n}\n\n```\n\nAnd the remaining logic to serialize and deserialize is similar to the explained previously.\n\n<h2 id=\"Load-and-save-a-`CUI`401\">Load and save a `CUI`</h2> \n\nWith the logic to convert `Modules` to JSON and back, the function to load and save modules would take just a few lines. The only thing we still cannot load nor store yet would be the inner state, so for now our conversational applications won't keep any memory between sessions.\n\n<h2 id=\"Let's-see-a-basic-example405\">Let's see a basic example</h2> \n\n```JSON\n{\n\"init\":\"greeted=False\",\n\"responses\":[{\n          \"input\":\"(hello|hi)!*\",\n          \"responses\":[{\n                  \"condition\":\"not greeted\",\n                  \"output\":\"Hi(, traveler)?\",\n                  \"execute\":\"greeted = True\"\n              },\n              {\n                  \"output\":\"Hello(, again|there)\"\n              }]\n          }]\n}\n\n```\n\n Possible exchange:\n\n```None\nUser: hi!!\nBot: Hi, traveler\nUser: hello\nBot: Hello there\nuser: hello!!!\nBot: Hello, again\n\n```\n\n<h2 id=\"Conclusion437\">Conclusion</h2> \n\nFinally we have covered what's necessary to define functional dialogue flows and test new features. From now on, all we'll do is extend what we have, because as the example shows, the scope of what this library offers is very limited compared to what we can still make.\n\nThe next step to take is to implement variables, so we can access and temporally modify the inner state directly from the `Pattern` class, in order to interpret the user input more intelligently. For this, we I will be explaining more advanced features of the regular expressions in Java.\n\nYou can check the code in GitHub, give it a star if you like it and see the documentation in [my new website](miguelmj.github.io/projects/JTASCHE.html).\n\n<h1 id=\"Variables-and-Placeholders445\">7.  Variables and Placeholders<small><a href=\"#toc\">  [TOC]</a></small></h1> \n\nWe already have a working chatbot engine, but as we saw in the example  of the last post, it's not very powerful. Now we are going to link the pattern matching and the inner state so we can make more specific checks on the user's input.\n\nTo do this we will have to make some preprocessing on the regular expressions we use, and even regenerate them several times during a session. **We will be making really heavy use of regular expressions**, so be prepared.\n\nNote: In this post the word pattern can refer to different things, so before anything I want to make clear what it means depending on the format I use:\n\n\n\n- Pattern, with capital P, refers to our custom class Pattern, that we defined in [Part 3](https://dev.to/miguelmj/writing-a-conversational-interface-library-part-3-55n4).\n\n- java.util.regex.Pattern refers to the native class of Java.\n\n- `pattern` refers to the java.util.regex.Pattern contained as an attribute in our custom Pattern class.\n\n\n\n<h2 id=\"Regex-Named-Capturing-Groups-in-Java463\">Regex Named Capturing Groups in Java</h2> \n\nBoth for the preprocessing and for the inner state interaction, we need to handle this concept at least in a basic level. I won't dive much more than needed in it, so here we go.\n\nIn a `java.util.regex.Matcher`  you can capture a specific part of your string using a regular expression, and furthermore, name it. The syntax for it, inside the regex, is the following:\n\n```none\n(?<name>subregex)\n\n```\n\nso the following code\n\n```java\nString regex = \"I am (?<age>[0-9]+) years old\";\nString str = \"I am 23 years old\"\nMatcher m = java.util.regex.Pattern.compile(regex).matcher(str);\nif(m.matches())\n\tSystem.out.println(m.group(\"age\"));\n\n```\n\nwill output:\n\n```\n23\n\n```\n\n<h4 id=\"Backreferencing492\">Backreferencing</h4> \n\nYou can also use capturing groups in the replace function, to replace the content of the string recycling the very match. To do this, you must use `${identifier}` in the replace string: \n\n```java\nString regex = \"I (?<word>[a-zA-Z]+)\";\nString str = \"I write, I code, I learn\";\nMatcher m = java.util.regex.Pattern.compile(regex).matcher(str);\nString result = m.repaceAll(\"We ${word}\");\nSystem.out.println(result);\n\n```\n\nThis code outputs:\n\n```\nWe write, We code, We learn\n\n```\n\nNow we are ready to face the new features of our library.\n\n<h2 id=\"Variables-and-placeholders514\">Variables and placeholders</h2> \n\nThis is the way we will make use of these terms when talking of Patterns:\n\n- **Variable**: They are read-only parts of the Pattern, that match/generate the correspondent value of the inner state. We will note them in our Patterns with a dollar sign: `$identifier` , where the identifier follows the lexical rules of the identifiers in C-families - Don't mistake this with the `${identifier}` I mentioned before, which works for the replace functions of the java `Matcher`, this is a construct of our own. **The need of Pattern regeneration comes from these**, because they change the strings recognized and generated.\n\n  _Example_: If we had in our inner state a variable `flavour = coffee`, then the Pattern `I like $flavour` would only match/generate `I like coffee`.\n\n- **Placeholder**: They are the parts of the pattern that store the matched value in the inner state. As you can imagine, we'll use the capturing groups for them.\n\n  _Example_: If the CUI uses this response\n\n```json\n  {\n   \"input\":\"my name is (?<name>[a-Az-Z])\",\n   \"output\":\"hello $name!\"\n  }\n\n```\n\n  then the response to `my name is Miguel` will be `hello Miguel!`\n\n<h2 id=\"Implementation536\">Implementation</h2> \n\nThe former implementation of Pattern we just had a `java.util.regex.Pattern pattern` and a `Generex generator`. Now, we may want to regenerate them before its use; let's see what are the conditions:\n\n- For output generation, the _placeholders_ will be trated as _variables_ (their difference is only notable when matching input).\n\n- This means that the `pattern` must be regenerated if the Pattern contains _variables_. The `generator`, furthermore, must be regenerated if the Pattern contains _variables_ or _placeholders_. \n\n- We need to add to our Pattern class the attributes `List<String> variables`, `List<String> placeholders`, `String inputTemplate` and `String outputTemplate`. **These last two will be used for regeneration**.\n\n<h3 id=\"Preprocessing-the-string-to-build-a-Pattern---I-used-the-regex-to-preprocess-the-regex546\">Preprocessing the string to build a Pattern - I used the regex to preprocess the regex</h3> \n\nNow, instead of building the `pattern` and the `generator` directly from the regex string (here we'll call it `str`), we have to:\n\n1. Find the _placeholders_ \n\n```java\n   String phPattStr = \"\\\\(\\\\?<(?<id>[^>]*)>\\\\([^)]*\\\\)[^)]*\\\\)\";\n   java.util.regex.Pattern phPatt = java.util.regex.Pattern.compile(phPattStr);\n\n   Matcher phFinder = phPatt.matcher(str);\n   while(phFinder.find()) {\n       placeholders.add(phFinder.group(\"id\"));\n   }\n\n```\n\n2. Find the _variables_\n\n```java\n   String varPattStr = \"\\\\\\\\\\\\$(?<id>[a-zA-Z][a-zA-Z0-9]*])\";\n   java.util.regex.Pattern varPatt = java.util.regex.Pattern.compile(varPattStr);\n\n   Matcher varFinder = varPatt.matcher(str);\n   while(varFinder.find()) {\n       variables.add(varFinder.group(\"id\"));\n   }\n\n```\n\n3. Set the templates for regeneration (remember that placeholders behave like variables in the output)\n\n```java\n   outputTemplate = phFinder.replaceAll(\"\\\\\\\\\\\\$${id}\");\n   inputTemplate = str;\n\n```\n\n4. Initialize the `pattern` and `generator` in case they won't be needing regeneration:\n\n```java\n   if(variables.isEmpty()) {\n       pattern = java.util.regex.Pattern.compile(inputTemplate);\n       if(placeholders.isEmpty()) {\n           generator = new Generex(outputTemplate);\n       }\n   }\n\n```\n\n<h3 id=\"Pattern-regeneration---Variable-replacement596\">Pattern regeneration - Variable replacement</h3> \n\nFirst of all, we'll make a static class called `RegexAdapter` (that we'll extend in the following chapter) which, for now, will contain a single function `replaceVariables`:\n\n```java\npublic static String replaceVars(String expr) {\n    String varPattStr = \"\\\\\\\\\\\\$(?<id>[a-zA-Z][a-zA-Z0-9]*])\";\n    java.util.regex.Pattern varPatt = java.util.regex.Pattern.compile(varPattStr);\n\tMatcher matcher = varPatt.matcher(expr);\n    while(matcher.find()) {\n        PyObject pyValue = Script.pyMachine.get(matcher.group(1));\n        String value = pyValue == null? \"\" : pyValue.asString();\n        expr = matcher.replaceFirst(value);\n        matcher.reset(expr);\n    }\n\n    return expr;\n}\n\n```\n\n_Here we used the same regular expression as before to build varPatt. We could store it in a final static attribute in the `RegexAdapter` to reuse it, instead of rewrite it each time._\n\n<h4 id=\"In-Matching619\">In Matching</h4> \n\nWe have to make two main changes in the matching function:\n\n1. Now we have to check if we use the `pattern` or a new one we generate from the `inputTemplate`:\n\n```java\n   java.util.regex.Pattern localPatt;\n   if(pattern != null){\n       localPatt = pattern;\n   }else {\n       String recognizerStr = RegexAdapter.remplaceVars(inputTemplate);\n       localPatt = java.util.regex.Pattern.compile(recognizerStr);\n   }\n\n```\n\n2. Then, when it matches, update inner state if the pattern contains _placeholders_:\n\n```java\n   java.util.regex.Matcher matcher = localPatt.matcher(str);\n   boolean match = matcher.matches();\n   if(match) \n       for(String ph: placeholders) {\n           String value = matcher.group(ph);\n           if(!ph.isEmpty())\n               Script.pyMachine.set(ph, value);\n       }\n\n```\n\n<h4 id=\"In-Generation650\">In Generation</h4> \n\nIn the generation function there is only a change needed, as we don't have to modify the inner state.\n\n1. We have to check if we use the `generator` or a new one we generate from the `outputTemplate`:\n\n```java\n   Generex localGen;\n   if(generator != null) {\n       localGen = generator;\n   }else{\n       String generatorStr = RegexAdapter.remplaceVars(outputTemplate);\n       localGen = new Generex(generatorStr);\n   }\n\n```\n\n<h2 id=\"Conclusion667\">Conclusion</h2> \n\nThat's it, we have implemented variables in our chatbot engine. It is beginning to be obvious that the input and output patterns should be separated in different classes. Anyways, if I do those changes, I won't document them here.\n\nThere is something we must take on count when using placeholders: the modification of the inner state occurs independently of the validity of the response it belongs to. **This means that a response could have an invalid condition, but the mere check of the input could modify the inner state**. For now we have to rely on the common sense of the user to make an intelligent use of variables and that is not a very good idea. We will have to implement a scoping system for this modifications sometime in the future .\n\nAnyways, the next chapter will be a special one. Even though it will be a part of this series, I intend it to be readable by its own. We will be extending the class `RegexAdapter`, to offer to the user the option to use normal regular expressions or a version we'll craft to simplify the most common uses.\n\n<h1 id=\"Adapted-Regular-Expressions675\">8. Adapted Regular Expressions<small><a href=\"#toc\">  [TOC]</a></small></h1> \n\nThe regular expressions that we will use in our library are mostly to process [controlled natural language](https://en.wikipedia.org/wiki/Controlled_natural_language), so we are going to make an adapted version of them. We will have to give up some of the potential of regular expressions to gain usability for the most common cases in our library.\n\n_Note: We are going to use regular expressions to process regular expressions, so they can get a little confusing. You may want to check out my post on [Correctly escaping regular expressions](https://dev.to/miguelmj/correctly-escaping-regular-expressions-27nc/)_\n\n<h2 id=\"Features681\">Features</h2> \n\nThe Adapted Expressions (this is how I will be calling this adapted version of regular expressions) have the following features and syntax:\n\n- **Optional parts**: They will be enclosed between squared brackets `[]` and may be omitted. `one two[ three]` recognizes both `one two` and `one two three`.\n\n- **Eligible parts**: They will be enclosed between parenthesis and separated by bars, and may be interchanged. `(one|two|three)` will recognize `one`, `two` or `three`\n\n- **Word placeholder**: They are used to recognize one or more words and store them in the inner state. The syntax is `@>id[quant]` for `[quant]` words stored in a group named `id`. `[quant]` can be any of the usual quantifiers of regular expressions in Java: this is `*`,`+`, `{n}` or `{min,max}`. For example, `You can call me @>fullname{1,3}` will recognize `You can call me Jon Doe` or any other name with one word minimum and three maximum.\n\n- **Number placeholder**: They are used to recognize one or more numbers and store them in the inner state. The syntax is `#>id[quant]`, with a similar behavior to the word placeholders.\n\n- **Variables**: They are used to represent the content of a variable of the inner state. The syntax is `$id`.\n\n_Note: Placeholders and variables refer to the same concepts explained in the last post_. \n\nHere's a table with the equivalences:\n\n| Adapted Expression | Regular Expression |\n|------------------|------------------|\n| [text]             | (text)?            |\n| (a&#124;b&#124;c)  | (a&#124;b&#124;c)  |\n| @>id               | (?\\<id>\\w+ ?)      |\n| @>id{n}            | (?\\<id>(\\w+ ?){n}) |\n| #>id               | (?\\<id>\\d+ ?)      |\n| #>id{n}            | (?\\<id>(\\d+ ?){n}) |\n| $id                | $id                |\n\n\n_Note: `$id` variables doesn't belong to Regular Expressions, but to the extension we made in the last post_.\n\n<h2 id=\"RegexAdapter-class712\">RegexAdapter class</h2> \n\nIn the previous we created this class to make a function to replace the variable names with the associated content in the inner state. Now we will add a new function to adapt the string of a Adapted Expression to a Regular Expression. It is very important to have clear that the reserved characters of the Adapted Expressions are not the same as in the Regular Expressions. For this reason, the first step of this transformation is to escape the characters with special meaning in a Regular Expression that are present in our Adapted Expression. This means that we have to assume that those characters are going to be escaped when we process them, and change that if necessary.\n\nWe are going to need the definition of certain constants. \n\n```java\n// The characters reserved in the Regular Expressions for which we don't want a\n// special meaning\nfinal static private char[] reserved = {'?', '^', '.', '$', '[', ']'};\n// The strings used to  build the regex that contain common concepts in our expressions\nfinal static private String id = \"[a-zA-Z_]\\\\w*\";\nfinal static private String num = \"\\\\d+\";\nfinal static private String print = \"\\\\\\\\w+\";\nfinal static private String quant = \"\\\\{\\\\d+,\\\\d*\\\\}|\\\\+|\\\\*\";\n// The regular expressions that we will use to make the transformation\nfinal static private java.util.regex.Pattern optional_open\n    = java.util.regex.Pattern.compile(\"\\\\\\\\\\\\[\");\nfinal static private java.util.regex.Pattern optional_close\n    = java.util.regex.Pattern.compile(\"\\\\\\\\\\\\]\");\nfinal static private java.util.regex.Pattern alphaplaceholder \n    = java.util.regex.Pattern.compile(\"\\\\@>(?<id>\"+id+\")(?<quant>\"+quant+\")?\");\nfinal static private java.util.regex.Pattern numplaceholder \n    = java.util.regex.Pattern.compile(\"\\\\#>(?<id>\"+id+\")(?<quant>\"+quant+\")?\");\nfinal static public java.util.regex.Pattern variable \n    = java.util.regex.Pattern.compile(\"\\\\\\\\\\\\$(?<id>\"+id+\")\");\n\n```\n\nWith this constants defined, we can define the function to escape the Regular Expressions:\n\n```java\nstatic private String quoteRegex(String regex){\n    for(char ch: reserved){\n        regex = regex.replaceAll(\"\\\\\"+ch, Matcher.quoteReplacement(\"\\\\\"+ch));\n    }\n    return regex;\n}\n\n```\n\nAnd finally we can define the function to make the translation using replacing with backreferencing:\n\n```java\nstatic public String adapt(String expr){\n    Matcher matcher;\n    matcher = optional_open.matcher(expr);\n    expr = matcher.replaceAll(\"(\");\n    matcher = optional_close.matcher(expr);\n    expr = matcher.replaceAll(\")?\");\n    matcher = alphaplaceholder.matcher(expr);\n    expr = matcher.replaceAll(\"(?<${id}>(\"+print+\" ?)${quant})\");\n    matcher = numplaceholder.matcher(expr);\n    expr = matcher.replaceAll(\"(?<${id}>(\"+num+\" ?)${quant})\");\n    return expr;\n}\n\n```\n\n<h4 id=\"Example771\">Example</h4> \n\nNow, instead of writing a response like this:\n\n```json\n{\n    \"input\": \"Remind((er| me)? to)? (?<action>(\\w ?)+) on (?<day>\\w+)\",\n    \"output\": \"I will you to $action on $day\"\n}\n\n```\n\nWe can write it like this:\n\n```java\n{\n    \"input\": \"Remind[[er| me] to] @>action+ on @>day\",\n    \"output\": \"I will remind you to $action on $day\"\n}\n\n```\n\n<h2 id=\"Conclusion-and-revision793\">Conclusion and revision</h2> \n\nNow we could add an option on each module or even each response that lets the user choose to either use a Regular Expression or an Adapted Expression, and use this function to transform these to those.\n\nSince we had our first functional version, we have added_\n\n- The possibility to read/write the inner state during the input matching and output generation.\n\n- A simplified yet extensible version of the regular expressions for the user. \n\nThis leaves us with the following issues:\n\n- We still have to make a scoping system to control the modifications made during a match that was finally not successful.\n\n- Add some options to the Pattern deserialization, to choose between Regular or Adapted expressions. \n\nAs those are tweaks, more than essential features, I will document them in a post about the final tweaks to the library. For now, the next post will be about adding knowledge to our chatbots. We will add a feature to let the user to specify sets of words under concept categories.\n\n<h1 id=\"Closing-the-project811\">Closing the project<small><a href=\"#toc\">  [TOC]</a></small></h1> \n\nThat final post didn't came out. I didn't have the time to program the last part and I honestly didn't want to dedicate that much energy to a side project, specially one that is already effectively functional and is intended for other hobby projects.\n\nThis project has been fun. If you have read all, I hope you have extracted some value... if not, I can't blame you. For me, this was what I needed to start blogging and an excuse to revisit an old ambition. If I ever come back to work with JTASCHE, I highly doubt I'll write about it, but who knows.\n",
    "positive_reactions_count": 5,
    "cover_image": null,
    "tag_list": [
      "closed"
    ],
    "canonical_url": "https://dev.to/miguelmj/writing-a-conversational-user-interface-library-full-series-3dc5",
    "reading_time_minutes": 25,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 532498,
    "title": "The Turing Machine made understandable",
    "description": "When it comes to explain what is the Turing Machine, I feel scientific dissemination isn't always acc...",
    "published": true,
    "published_at": "2020-12-08T13:42:16.587Z",
    "slug": "the-turing-machine-made-understandable-35po",
    "path": "/miguelmj/the-turing-machine-made-understandable-35po",
    "url": "https://dev.to/miguelmj/the-turing-machine-made-understandable-35po",
    "comments_count": 0,
    "public_reactions_count": 8,
    "page_views_count": 157,
    "published_timestamp": "2020-12-08T13:42:16Z",
    "body_markdown": "When it comes to explain what is the Turing Machine, I feel scientific dissemination isn't always accessible for people without a specialized background. Before I studied it in university, I never really understood what it was, only that it had to do with the origins of computers and it was not a \"real\" machine. \n\nFor that reason I want to summarize the concepts behind the Turing Machine and explain how it defined what we consider computation in the way I would have liked them to be explained to me.\n\n## What is Computation?\n\nWhen we talk about computation we, obviously, think about computers: digital information processing. Nonetheless, the actual meaning of computation is not limited to digital processing nor computers. We could say that\n\n> Computation is every process for which a given input is transformed into a determined output, or result.\n\n### Give me some examples\n\nSome general processes of computation:\n\n- A tree computes water and carbon dioxide into clorophyll and oxygen.\n- A candle computes string and wax into light and heat.\n- Our digestive system computes food into muscle, fat, energy and... wastes.\n- A pocket calculator computes two numbers and an operator pressed on the keyboard into another number.\n\n## What is a Computational Model?\n\nTo keep it simple, let us say that:\n\n> A computational model is the definition of the rules that must be followed by the computations performed by a system.\n\nFor most of the previous examples, you can't really talk about a computational model because the systems are \"natural\" and just follow the laws of physics and chemistry. In the case of the pocket calculator, the computational model is too complex to explain it here.\n\n### Some minimalistic examples\n\nThe most simple computational model could be imagined as a look-up table, where you look for the input you receive and produce the result written in the table.\n\n- A table to invert a binary string:\n\n    | Input | Output |\n    |:---:|:---:|\n    | 0 | 1 |\n    | 1 | 0 |\n    \n    For the input `10100` the output is `01011`.\n\n- A table to convert lower-case to upper-case:\n\n    | Input | Output |\n    |:---:|:---:|\n    | a | A |\n    | b | B |\n    | c | C |\n    | ... | ... |\n    | z | Z |\n    \n    For the input `i love you` the output is `I LOVE YOU`.\n\n### More complex minimalistic examples\n\nNow, computational models are usually more complex than direct equivalence tables. They usually have **states**, which are taken into account as part of the computation. \n\nThis states represent different parts of the process of computation and determine the output for an input. \n\n- If our model was a cooking pot full of water, we could define it like this:\n\n    Initial state: `PotIsCold`\n    \n    | State | Input | Output | New State |\n    |:---:|:---:|:---:|:---:|\n    | PotIsCold | raw rice | wet raw rice | PotIsCold |\n    | PotIsCold | heat | - | PotIsHot |\n    | PotIsHot | raw rice | cooked rice | PotIsHot |\n    | PotIsHot | heat | - | PotIsHot |\n    \n    You see that now we don't have just an entry for each input, but for the combinations of each input in each possible state of the model.\n    \n- For example, if we wanted to define a model that inverts one digit of every two alternately in a binary string, we could have:\n\n    Initial state: `Invert`\n\n    | State | Input | Output | New State |\n    |:---:|:---:|:---:|:---:|\n    | Invert | 0 | 1 | Pass |\n    | Invert | 1 | 0 | Pass |\n    | Pass | 0 | 0 | Invert |\n    | Pass | 1 | 1 | Invert |\n    \n    For the input `111111` the output would be `010101`.\n\nIf you have understood it to this point, congratulations! You have understood Finite State Automata!\n\n## The Turing Machine as a Computation Model\n\nNow that we understand what computation and computation models are, we can talk about the Turing Machine. The name is misleading, because it is not _one machine_, but a _family of theoretical machines_.\n\nA Turing Machine is imagined as a machine that reads from and writes to one tape of infinite size, using a _head_. The computational model also has a set of possible states, which determine what the machine does when it reads a symbol from the tape: write another symbol o move the tape.\n\nHere you have a little demonstration on a Turing Machine online simulator that converts a decimal number to its binary representation.\n\n{% youtube FFYRBcxsIp4 %}\n\nTry it youself [here](https://turingmachinesimulator.com/) (Examples > Binary to decimal > Compile).\n\n## A Universal Computation Model\n\nIt's been mathematically proven that any computation process can be expressed as a Turing Machine. So the following question is... what if we use the definition of a Turing Machine _as the input of another Turing Machine_?\n\nThe answer is the Universal Turing Machine, that is defined in such a way that can simulate the behaviour of any Turing Machine, given its definition. This is what makes it a Universal Computation Model.\n\n> Not only can it express any computing process, but a single model can simulate all others: it is a **general purpose computer**.\n\nSo this is why the Turing Machine was the precursor of the computers we know today. The concept of the Universal Machine behind it is exactly the same as that on which digital computers operate.\n\nA digital computer is a machine (processor, memory, etc) that can execute any computation given its definition (program). This is the reason why computers have meant a bigger revolution than any other kind of technology, because they don't have any specific purpose; they are able to automate everything that can be defined by an algorithm.\n\n### Some trivia\n\n- _Are digital computers really equivalent to the theoretical Turing Machine?_\n  No. The memory of the Turing Machine (the tape) is infinite and computers have limited memory. However, with the huge amounts of memory that modern disks can handle and the possibility to distribute it over the Internet, that limitation is hardly a problem.\n\n## Conclusion\n\nAs a Turing Machine can express and simulate any possible computation, studying its properties, limits and possibilities allows us to better understand which kind of problems are solvable by computers and which are not. The questions raised by this model are still being studied and many are still unanswered.\n\nTuring invented his machine in 1936, and since then we haven't come up with a more powerful computation model. So as surprising as it may sound, even the latest artificial intelligence innovation could be performed by this simple model created almost a century ago.",
    "positive_reactions_count": 8,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--Zm0fiPS1--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/5o3j90ijp1qiesmdrf9x.jpg",
    "tag_list": [
      "computerscience",
      "algorithms",
      "learn"
    ],
    "canonical_url": "https://dev.to/miguelmj/the-turing-machine-made-understandable-35po",
    "reading_time_minutes": 4,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 525795,
    "title": "5 Tips for programming and CS remote teachers",
    "description": "As a university student and a private programming teacher, I have experience in both sides of the scr...",
    "published": true,
    "published_at": "2020-12-01T08:45:39.201Z",
    "slug": "5-tips-for-programming-and-cs-remote-teachers-1gg7",
    "path": "/miguelmj/5-tips-for-programming-and-cs-remote-teachers-1gg7",
    "url": "https://dev.to/miguelmj/5-tips-for-programming-and-cs-remote-teachers-1gg7",
    "comments_count": 0,
    "public_reactions_count": 4,
    "page_views_count": 102,
    "published_timestamp": "2020-12-01T08:45:39Z",
    "body_markdown": "As a university student and a private programming teacher, I have experience in both sides of the screen of an online class. I've been fortunate that most of my teachers have adapted well, but I know that not everyone can say the same. From experiences of my professors, other private teachers in my circle and myself, I've tried to compile some advice on teaching online programming and CS lessons.\n\n# 1. You need a comfortable board substitute\n \nEven if programming only requires your code editor, nothing can replace a drawing board when you want to explain algorithms, data structures or math. Let me say, **even if you have slides**, its extremely rare that they are more visual than drawing something in front of the student.\n\nYour best options, from better to worse, are:\n\n1. **A graphic tablet and screen sharing**. \n\n    This is the most natural way to integrate your writing and drawing into an online class. The main disadvantage is that a graphic tablet is an investment not everyone can or want to make.\n\n2. **A second webcam pointing to your desktop**.\n\n    This is what I do with my own students. I attached an old webcam I had to a piece of cardboard and used it to draw in a paper in front of it. \n    Before your class, you may want to try the following.\n    - _Check if the platform allows you to rotate the image_ so the student can see the paper the same  orientation you do.\n    - _Learn the fastest way to switch cameras_. Some platforms have shortcuts for that, but if they don't, memorize where to find the configuration to do it as fast as possible.\n\n3. **A physical board**\n\n    If you have your own blackboard or whiteboard, you can always keep it at hand and use it in front of the camera. It isn't the most comfortable option to use with a computer, but it is still the best one for those less techy teachers (not as unusual in our field as it sounds).\n\nWith this methods you avoid things that waste your time and the attention of your students like:\n\n- _Drawing with the mouse_. If it is absolutely necessary, do it, but it is so slow and complicated that usually is not worth it.\n- _Writing math in plain text_. If we're talking about basic stuff, it may be possible (maybe even with the help of LaTex) but the simplest level of complexity, like matrix operations, sub and super indices, etc, will drastically drop its quality.\n\n# 2. Get fluent in screen sharing\n\nSharing screen is a basic activity in almost any online lesson, so you need to keep two things in mind:\n\n- You have to **help your students focus** on what they have to.\n  - If you are sharing slides, do it in **fullscreen mode**.\n  - If you show code, **zoom in the editor or make the font bigger**, to make sure that your students can read it easily.\n  - **Have your desktop and browser tabs as clean as possible**, so your students don't get distracted by them (and to protect your own privacy if you use online resources).\n- In most platforms, sharing screen means **you can't see the classroom chat, so tell the students how they can call your attention**. Either activating they microphone or keeping their questions for the end, but make sure they know what to do if they don't understand, because the feeling of disconnection with the teacher can make you lose their attention.\n  - If not all students have microphone, another option is to have one student (who does have one) in charge of reading the questions of the others. Sometimes they take that initiative themselves, but it is good to suggest it yourself, in case they don't.\n\n# 3. Make your slides progressive\n\nIf you are going to use them, then you can't do it the same way you would in person. In a face-to-face classroom, they are not the main focus of attention, because your physical presence plays that role. In an online classroom, on the other hand, students don't have you but a flat screen to look at.\n\nFor this reason, they shouldn't feel scared nor bored when looking at it. What level do your students have? Make sure they don't see at once a lot of unknown or trivial information. Make it appear as you talk and pace it to their understanding. An evolving screen keeps them engaged.\n\n# 4. Praise webcam use and draw attention periodically \n\nAs the teacher, you will also have a flat screen in front of you instead of your students. In person you can perceive their feedback more easily and they might feel more comfortable rising their hands or answering a question.\n\nBut online, you don't always see them, so don't assume that they just will interrupt you to ask. Make periodic pauses for them to raise their questions or even to check they have listened what you  just explained.\n\nIt is hard to feel that you are talking to a wall. So verbally greet the students that speak to you or that activate their webcam when doing it. Not only it is a nice gesture to you, but also helps them feel more involved.\n\nIf there is no difference between your lesson and a recorded video, your students feel discouraged from participating.\n\n# 5. Keep in mind CPU limitations\n\nFinally, take into account that your students, almost always, will be using the same computer to attend your class and to work, if you are giving practical lessons. This can be a problem if you make them use software that consumes a lot of resources (some IDEs, emulators or VMs, 3D engines, etc) and their computer is not powerful enough to have it running and reproduce the lesson at the same time.\n\nIf this is your case, separate the instructions for the practical sessions and the sessions themselves and have a lighter alternative of communicating during them, like a forum or a chat. Students might feel helpless if you are streaming your class and they can't follow you because their computer is about to melt.\n\n***\n\nI hope you found this useful. Do you have any other tips? I'd love to know what is your experience with online classes!\n\n\n",
    "positive_reactions_count": 4,
    "cover_image": null,
    "tag_list": [
      "learning",
      "online",
      "tips",
      "teaching"
    ],
    "canonical_url": "https://dev.to/miguelmj/5-tips-for-programming-and-cs-remote-teachers-1gg7",
    "reading_time_minutes": 4,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 523903,
    "title": "Are you going to learn that? - Ambiguity of \"Programming\"",
    "description": "We live in the middle of an industrial revolution, brought by computers and telecommunications. I don...",
    "published": true,
    "published_at": "2020-11-26T09:16:58.329Z",
    "slug": "are-you-going-to-learn-that-ambiguity-of-programming-1kdj",
    "path": "/miguelmj/are-you-going-to-learn-that-ambiguity-of-programming-1kdj",
    "url": "https://dev.to/miguelmj/are-you-going-to-learn-that-ambiguity-of-programming-1kdj",
    "comments_count": 3,
    "public_reactions_count": 11,
    "page_views_count": 189,
    "published_timestamp": "2020-11-26T09:16:58Z",
    "body_markdown": "We live in the middle of an industrial revolution, brought by computers and telecommunications. I don't need to tell you that our lives and habits have been turned upside down; there are philosophers and psychologists reviewing this phenomenon better than I'm able to.\n\nAnyways, there are some things I do want to point out, as every day more people become interested in programming and I'd like to give some references to those who are just starting. If you are already an experienced programmer, you might also find this insightful.\n\n# Everyone has advice for beginners\n \nProgramming has a place in all sectors of the market and also as a hobby, thanks to the increasing accessibility of the tools and the knowledge required. We have even come to hear that coding will be demanded in the future as a second language is today (something that has already been called into question).\n\nThere's a risk for newcomers in such a big field. There are thousands of options, thousands of voices and experiences. It's very common to see all over our communities articles titled _What language you should learn first?_, _Should you learn more than one language?_, _Tips for noob coders_, etc, etc, etc.\n\nWell, here is my piece of advice: **Don't listen to just anyone**.\n\nBefore you rage on me, let me explain. There is something that not everyone realizes and that even some experienced programmers seem to overlook when giving advice: the words _programming_ and _programmer_ are not descriptive enough.\n\n# Community and identity\n\nThere is a natural tendency for practitioners to form their guilds. We come to one another looking for help, inspiration, advice, critique... This is how we grow. Also, this is how groups form their identity and stereotypes, which some proudly identify with, while others actively break.\n\nI won't comment on whether that's a good or a bad thing, but we should mind the incomplete and distorted image that aspiring programmers receive. If you have learned coding in the last decade, I'm pretty sure you have seen (or even been) that young student who thinks that all programmers have dozens of stickers on their laptops, love caffeine and speak in \\<p>code\\</p>.\n\nThere's nothing wrong with it, I love that people enjoy and engage with their activities (and stickers and coffee too), but I've also seen people of different ages and backgrounds stick to a preconceived idea of what programming is, what possibilities it offers and the _better way_ to success.\n \nBut in reality - I can't stress this enough - **programming is just a tool**. This means that _programming_ is not a career itself, it is not enough ground to set a path to success (whatever that means to you) and not enough to generalize programming career advice.\n\n# Who should you listen to?\n\n## You have a specific goal\n\nYou are lucky then. Either you want to become a videogame developer, a cibersecurity expert, a mobile app developer or a data scientist, there are more or less objective learning steps you can follow, there are specific industry standards to adopt and, in general, a limited scope for you to dive into.\n\nI'm aware that there is still a plethora of decisions to take. Which platform? Which game engine? Which web stack? Well, here you can listen to the experts in your concrete subfield and also trust that if you don't end up using the first technology you learn, the concepts you have internalized will indeed feed back what you learn next.\n\nThis is where programming as a tool shines. You have a problem, programming is your solution. The thing is: we must have this in mind when sharing our advice. As valuable as it is, _consider if it refers to your chosen path, or to actual general programming_.\n\n## You are not sure what your goal is\n\nYou just love programming. You are as interested in a hackers convention as in a game jam as in a data mining contest. You are excited about different programming paradigms. One day you want to learn computer vision and the next one virtual architectures.\n\nThen, you need to consider several things, to make you less susceptible to deceiving and confusing opinions like _you should totally learn X language_, _you should totally avoid X language_, _you need a lot of math to program_, _you don't need a lot of math to program_, _this technology will be the best paid next year_, _this technology will disappear next year_...\n\n- **Be honest with yourself about the complexity you are able and are willing to handle and get to know how much your interests will demand**. I am always surprised by people who want to excel in video game development or machine learning without having a certain level of mathematics. I'm not saying it's not possible, but you will be clearly limited by it.\n\n- **Be aware that this process will take time**. To know the complexity of a given field you either have to dedicate some time to it, or get in touch with people that can mentor you or share the difficulties they've faced. Both options require some dedication, so don't expect a short and straight way. Hopefully, it will compensate.\n\nSo I do have a central piece of advice for you: **focus on one thing and make yourself employable; after that you can expand your horizons**.\n\nDon't get me wrong. I strongly believe that theoretical background and transversal competence pay off, whatever many people say. The applications may not be directly applicable, but nothing else trains your abstract thinking and problem solving skills as a continuous process of learning.\n\nHowever, be sure you don't lose touch with reality. If you want to work in an industry, you have to present a set of skills and practical expertise. To achieve it, you can't be jumping from one subject to another. As I said, you want to be employable before allowing yourself to explore other disciplines.\n\n# Conclusion\n\nWhether you are looking for advice or giving it, remember that you are never just a programmer. Consider how your choices differentiate your career and how that would apply or not to others. \n\nIt doesn't matter what programming is for you: from an interesting way of earning a living to a gateway to the possibilities of universal computing. If you belong to the programmer community, I would be happy if after reading this post you remembered how it was getting started for you and were a little more committed to correctly assist the newcomers to this complex world.",
    "positive_reactions_count": 11,
    "cover_image": null,
    "tag_list": [
      "career",
      "learning",
      "beginners",
      "mentoring"
    ],
    "canonical_url": "https://dev.to/miguelmj/are-you-going-to-learn-that-ambiguity-of-programming-1kdj",
    "reading_time_minutes": 5,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 519437,
    "title": "Beginner tips to do Algebra in Python",
    "description": "There are two kind of people that usually share a common difficulty when starting to use Python: thos...",
    "published": true,
    "published_at": "2020-11-21T11:49:35.205Z",
    "slug": "beginner-tips-to-do-algebra-in-python-477e",
    "path": "/miguelmj/beginner-tips-to-do-algebra-in-python-477e",
    "url": "https://dev.to/miguelmj/beginner-tips-to-do-algebra-in-python-477e",
    "comments_count": 0,
    "public_reactions_count": 8,
    "page_views_count": 572,
    "published_timestamp": "2020-11-21T11:49:35Z",
    "body_markdown": "There are two kind of people that usually share a common _difficulty_ when starting to use Python: those who learn it without previous coding experience and those who come from a low-level programming background.\nI fall under the second category and when it comes to certain problems I know we tend to ignore possible native solutions and try to solve them in an algorithmic way. This is nice (and better) for learning, but high level languages usually offer solutions that will be easier to code, understand and maintain.\n\nI will assume you understand lists, dictionaries and sets in Python and the basics of algebra.\n\n**Contents**\n 1. List, Dictionary and Set Comprehension\n 2. Set operations\n   - Sets of sets\n 3. `functools` module\n   - `functools.reduce`\n   - `functools.lru_cache`\n\n## List, Dictionary and Set Comprehension\n\nLet's say we have a list containing some numbers and we want to extract from it only the even ones into a separate list. A perfectly valid approach would be:\n\n```python\nmylist = [5,4,3,7,8,1,12]\neven = []\nfor n in mylist:\n  if (n%2 == 0):\n    even.append(n)\nprint(even)\n# [4,8,12]\n```\n\nThis is pretty standard for C-family languages, for example. However, a most pythonic way is to use a **list comprehension**:\n\n```python\nmylist = [5,4,3,7,8,1,12]\neven = [x for x in mylist if x%2 == 0]\nprint(even)\n# [4,8,12]\n```\n\nList comprehension is a way of specifying the contents of a new list by an expression and an optional condition related to the elements of an iterable object. The syntax is the following:\n\n```python\n# without filter\n[expression for element in sequence]\n# with filter\n[expression for element in sequence if condition]\n```\n\nSo another example could be to copy a list of strings, changing all of them to upper case:\n\n```python\nnames = ['Mikkel', 'Jonas', 'Martha']\nuppernames = [name.upper() for name in names]\nprint(uppernames)\n# ['MIKKEL','JONAS','MARTHA']\n``` \n\nNow, you can also define sets and dictionaries by comprehension:\n\n```python\n# sets\nset(expression for element in sequence)\n{expression for element in sequence}\n# dicts (note here's a difference in the key value specification)\ndict((key,value) for element in sequence if condition)\n{key:value for element in sequence if condition}\n```\n\nBut there is more! You don't have to iterate just a single sequence. Python allows you to add more than one `for <sequence>` in your comprehensions. Let's see some examples:\n\n```python\n# dictionary merge\nmerged = {k:v for (k,v) in dict1 for (k,v) in dict2}\n# cartesian product of two sets\n# - note that the result is not a dict, but a set of tuples\ncartesian = {(x,y) for x in set1 for y in set2}\n```\n\n[Here](https://www.smallsurething.com/list-dict-and-set-comprehensions-by-example/) you'll find more examples on list, dict and set comprehensions.\n\n## Set operations\n\nNow, with set comprehension it's easy to define usual operations between sets. Nonetheless, Python already defines these operations natively:\n\n```python\nabcde = {'a','b','c','d','e'}\nvowels = {'a','e','i','o','u'}\n\nintersection = abcde & vowels\n# {'a','e'}\nunion = abcde | vowels\n# {'a', 'b', 'c', 'd', 'e', 'i', 'o', 'u'}\ndifference = abcde - vowels\n# {'b','c','d'}\nsymmetricDifference = abcde ^ vowels\n# {'b','c','d','i','o','u'}\n```\n\n_Note that the output doesn't need to be sorted, but I wrote it that way to make it easier to understand._\n\nNow, there are not only operations that result on new sets, but also boolean operators like:\n\n```python\nisStrictSubset1 = abcde < abcde\n# False\nisStrictSubset2 = difference < abcde\n# True\n\nisSubset1 = abcde <= vowels\n# False\nisSubset2 = abcde <= abcde\n# True\nisSubset3 = difference <= abcde\n# True\n\nisEmptySet = bool(abcde)\n# False\nisEmptySet = bool(abcde - abcde)\n# True\n```\n\n### Sets of sets\n\nA limitation to have in mind when working with sets in Python is that sets can only contain hashable types (int, char, tuples...) and sets themselves are not hashable. For this reason, if you want to store a set of sets, you must use instead a list of sets. Fortunately, this time list comprehension plus list operations can make it to replace the set operations.\n\n```python\nset1 = [{1,2,3}, {'a','b','c'}, {'A','B','C'}]\nset2 = [{'a','b','c'}, {'b','c'}, {'c'}]\n\nintersection = [x for x in set1 if x in set2]\n# [{'a','b','c'}]\ndifference  = [x for x in set1 if x not in set2]\n# [{1,2,3}, {'a','b','c'}, {'A','B','C'}]\nunion = set2 + difference\n# [{'a', 'b', 'c'}, {'b', 'c'}, {'c'}, {1, 2, 3}, {'A', 'B', 'C'}]\n\n# You get the idea\n```\n\n## `functools` module\n\nThis is a useful python module that provides very interesting utilities, from which I'll only talk about two: `reduce` and `@lru_cache`.\n\n[Here](https://docs.python.org/3/library/functools.html) you'll find the complete official documentation on this module.\n\n### `functools.reduce`\n\n`reduce` is very powerful tool, as it can generalize almost any (if not all) iterative processes on a list, and I strongly recommend you to dive deeper yourself in its use. For the purpose of this post, I will just use it to generalize the operations between an undefined number of sets.\n\nLet's say we have the same list of sets as before and we want to make the union of all of them. A valid approach would be:\n\n```python\nset1 = [{1,2,3}, {'a','b','c'}, {'A','B','C'}]\nunion = set() \nfor x in set1:\n  union = union | x\n```\n\nBut with reduce the exact same behaviour is obtained as it follows:\n\n```python\nset1 = [{1,2,3}, {'a','b','c'}, {'A','B','C'}]\nunion = functools.reduce(set.union, set1)\n# {1, 2, 3, 'a', 'A', 'b', 'c', 'B', 'C'}\n```\n\nThe first argument is the function to apply and the second is the list to which it will be applied, in an accumulative way. _Note that I didn't use the operator `|` as before. Instead, I had to use the named function `set.union`. To find the named functions corresponding to the set operators, you can type `help(set)` in your Python console._\n\n### `@functools.lru_cache`\n\nAs you can imagine, though comprehensions are easy to type and understand, they are not precisely cheap in computation time. The module `functools` provides us with several ways to cache the results of a function (note that a similar behaviour is obtained for class methods with `@functools.cached_property`).\n\n```python\n@functools.lru_cache\ndef count_vowels(sentence):\n  sentence = sentence.casefold()\n  return sum(sentence.count(vowel) for vowel in 'aeiou')\n```\n\nWith such a simple annotation above the function definition, a number of calls will store its result, in case they are called again, to return it instead of executing the same code again.\n\nThis is useful not only for computationally expensive functions that won't change the result, but also for recursive functions that will be repeated. For example:\n\n```python\n@functools.lru_cache\ndef factorial(n):\n  return n*factorial(n-1) if n else 1\n```\n\n## Practical example\n\nLet's see how this apply, for example, to track familiar relations.\n\n```python\nimport functools\n\n# https://en.wikipedia.org/wiki/Transitive_closure\ndef transitiveClosure(relation):\n    closure = relation\n    while True:\n        delta = {(x,y) for (x,r1) in closure for (r2,y) in closure if r1 == r2}\n        newClosure = closure | delta\n        if newClosure == closure:\n            break\n        closure = newClosure\n    return closure;\n\n# Direct descendance information\nchildRelation = {\n         ('Martha','Ulrich'),\n         ('Mikkel','Ulrich'),\n         ('Magnus','Ulrich'),\n         ('Mads','Tronte'),\n         ('Ulrich','Tronte'),\n         ('Tronte','Agnes'),\n         ('Jonas','Hannah'),\n         ('Jonas','Michael')}\n\ndescendantRelation = transitiveClosure(childRelation)\n\n# Some functions using our new relation\n@functools.lru_cache\ndef ancestorsOf(x):\n    return {b for (a,b) in descendantRelation if a==x}\n\ndef isDescendantOf(x,y):\n    return y in ancestorsOf(x)\n\ndef areRelated(peopleList):\n    ancestors = [ancestorsOf(x) for x in peopleList]\n    commonAncestors = functools.reduce(set.intersection, ancestors)\n    return bool(commonAncestors)\n\nprint(ancestorsOf('Martha'))\n# {'Agnes','Tronte','Ulrich'}\nprint(isDescendantOf('Jonas', 'Agnes'));\n# False\nprint(isDescendantOf('Martha', 'Agnes'));\n# True\nprint(areRelated(['Martha', 'Jonas']));\n# False\nprint(areRelated(['Martha', 'Magnus', 'Mikkel']));\n# True\n```\n\n***\n\nI hope you find this information useful. Do you have any tips you want to share? If you have experience solving your math assignments with Python (or any other language) I'd love to read them!",
    "positive_reactions_count": 8,
    "cover_image": null,
    "tag_list": [
      "python",
      "tutorial",
      "beginners",
      "math"
    ],
    "canonical_url": "https://dev.to/miguelmj/beginner-tips-to-do-algebra-in-python-477e",
    "reading_time_minutes": 5,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 490980,
    "title": "Thoughts on declarative programming - Why I'm learning Prolog",
    "description": "First of all I want to state that in this post I will use declarative programming language to refer...",
    "published": true,
    "published_at": "2020-10-23T14:35:10.380Z",
    "slug": "thoughts-on-declarative-programming-why-i-m-learning-prolog-43be",
    "path": "/miguelmj/thoughts-on-declarative-programming-why-i-m-learning-prolog-43be",
    "url": "https://dev.to/miguelmj/thoughts-on-declarative-programming-why-i-m-learning-prolog-43be",
    "comments_count": 3,
    "public_reactions_count": 6,
    "page_views_count": 304,
    "published_timestamp": "2020-10-23T14:35:10Z",
    "body_markdown": "> First of all I want to state that in this post I will use _declarative programming language_ to refer to purely functional (Haskell, Miranda) and logical (Prolog) programming. No query languages (SQL) nor markup languages (XML).\n\nContents\n\n  - [Why is declarative programming less popular?](#Why-is-declarative-programming-less-popular?)\n  - [Reasons to learn a declarative language](#Reasons-to-learn-a-declarative-language)\n  - [My personal experience - Why I choose Prolog](#My-personal-experience---Why-I-choose-Prolog)\n\n\nMost of us (if not all) start our programming journey with an imperative language (C, Python, JS...). This way we learn to think about the algorithms, the step by step process to solve problems. I agree that this is the best way to start, but I believe that we, developers, should be curious by nature and try out new things. However, many prefer to keep their distance from declarative programming, without understanding how it would benefit them. Here are my thoughts on this topic.\n\n## Why is declarative programming less popular?\n\n**1. Computers don't work that way**\n\nTo begin with, computers themselves execute programs in an imperative manner (one instruction after another), and I'm pretty sure they always will, because we don't live in a mathematical realm where definitions _just apply_. For this reason, **imperative programming is a better way to learn the internals of your computer**, how your code is compiled into machine language, how it is executed, etc (even if it's an interpreted language, this concepts can be understood easier).\n\nAs I said, it is good to start like this, because the grasp you get of what's going on is really better.\n\n**2. It feels like starting from zero**\n\nThe first time I was told to write a Haskell program in the second year of my degree, and I learnt that **I couldn't use assignation or loops**, I felt again like an absolute beginner. The difference in how data is handled and the fact that I didn't fully understand how the execution worked, with what I felt was an obscene amount of recursive calls, blocked me for a moment.\n\nIt is completely normal to think _\"I would do this so much easier in my usual language, in which I have much more experience and that adjusts better to my way of thinking\"_.\n\n**3. It is not the industry standard**\n\nThe **[most popular languages in 2020](https://www.northeastern.edu/graduate/blog/most-popular-programming-languages/) are imperative, some more multiparadigmatic than others**, but none purely functional or logical. So, why bother? If it won't get me a better salary, is it really worth it?\n\n## Reasons to learn a declarative language\n\n**1. If you do better declarative, you do better imperative**\n\nAnd for what I've seen and experienced, it doesn't go the other way around. **The declarative approach often needs some good practices that are not strictly necessary in the imperative**, in terms of what each block of code does and the consideration of all possible cases. \n\nWhen we keep our code clean of the little hacks we sometimes do, is easier to document, debug, maintain and scale it.\n\n**2. Focus on the problem, write less code**\n\nThe first time I wrote a Python program after years of C++, I couldn't believe that hundreds of lines of code were reduced to a few dozen. Well, that was nothing compared to what I felt while learning Haskell, where those dozens of lines in Python could be written in less than ten.\n\nFunctional and logical programming take a lot from math, so definitions are short, expressive and powerful, but need a level of abstraction that requires time to apprehend.\n\n**3. Make a difference in your CV**\n\nAs I said, the most popular languages are not declarative. But for this same reason, there are fewer developers (even thought their communities are growing). You will find Python, Java and Javascript developers under each stone, but having a different language in your belt tells that **you have devoted time to step out of the comfort zone** and you are familiar with different approaches.\n\n## My personal experience - Why I choose Prolog\n\nProlog has multiple implementations, but I recommend SWI-Prolog, available for Windows, Linux and Mac. You can try it online in its official site (link below). It comes with a bunch of useful libraries and very good documentation.\n\n**1. Soft learning curve**\n\nMy first experience with declarative programming, as I mentioned, was with Haskell. I really fell in love with the language, but there's a point where it got too abstract for me. I wish to retake it, but in the meanwhile, I discovered that Prolog is more intuitive in a lot of ways.\n\nAlso, there are great resources and documentation to learn Prolog from the very basics to a pretty decent level:\n\n- http://www.learnprolognow.org/\n- https://www.swi-prolog.org/\n\n> *Edit*. I'm adding also a link to the [awesome-prolog](https://github.com/klaussinani/awesome-prolog#resources) repository, where a lot more of resources can be found.\n\n**2. Native syntax for grammars**\n\nI personally love working with grammars. I think they are useful and powerful. I have done a lot of personal work with tools like Flex and Bison, so when I discovered that Prolog has native support for them, via what it calls Definite Clause Grammars (DCG), I immediately fell for it. It may not be the perfect option to deal with highly complex semantics, but it sure does it for most common uses in text processing.\n\n**3. Easy to embed and integrate**\n\nIf you want to use SWI-Prolog as some kind of inference module, a way to connect your applications with a knowledge base, instead of the main language, it has interfaces for several languages, like [C](https://www.swi-prolog.org/pldoc/man?section=foreign), [C++](https://www.swi-prolog.org/pldoc/doc_for?object=section(%27packages/pl2cpp.html%27)), [Java](https://www.swi-prolog.org/pldoc/doc_for?object=section(%27packages/jpl.html%27)) or [Python](https://pypi.org/project/pylog/).\n\n***\n\nWhat is your experience with declarative programming? Do you think it's worth it? Feel free to comment about your favorite languages or recommend learning resources! ",
    "positive_reactions_count": 6,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--bCW2rxrp--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/5md66nn8sbe6bt33uwt0.jpeg",
    "tag_list": [
      "prolog",
      "declarative",
      "career",
      "improve"
    ],
    "canonical_url": "https://dev.to/miguelmj/thoughts-on-declarative-programming-why-i-m-learning-prolog-43be",
    "reading_time_minutes": 4,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 466399,
    "title": "Candle - A 2D lighting library for SFML",
    "description": "There is a big difference in the look and feel of a 2D game with dynamic lighting and one without it....",
    "published": true,
    "published_at": "2020-09-26T13:46:41.132Z",
    "slug": "candle-a-2d-lighting-library-for-sfml-2e1f",
    "path": "/miguelmj/candle-a-2d-lighting-library-for-sfml-2e1f",
    "url": "https://dev.to/miguelmj/candle-a-2d-lighting-library-for-sfml-2e1f",
    "comments_count": 0,
    "public_reactions_count": 4,
    "page_views_count": 625,
    "published_timestamp": "2020-09-26T13:46:41Z",
    "body_markdown": "There is a big difference in the look and feel of a 2D game with dynamic lighting and one without it. The bad thing is that, while 2D game development is relatively accessible, lighting algorithms are not as much.\n\nFortunately, we have amazing people in this world, like javidx9, that has [this amazing tutorial](https://www.youtube.com/watch?v=fc3nnG2CG8U) on 2D shadow casting. It inspired me to write Candle. It is easy to integrate, it has no dependencies other than SFML itself and it's open for further development!\n\nThe code comes with a demo to test the main features, which are dynamic lights, fog and shadows.\n\n![demo gif](https://raw.githubusercontent.com/MiguelMJ/Candle/master/doc/img/demo.gif)\n\nAny feedback is appreciated! Thank you and have a nice day ;)\n\nCode: https://github.com/MguelMJ/Candle\nDocumentation: https://github.com/MiguelMJ/Candle\n\n\n{% github MiguelMJ/Candle %}",
    "positive_reactions_count": 4,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--UBbmJHKq--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/07tknss5281r7xrlq10o.png",
    "tag_list": [
      "showdev",
      "sfml",
      "cpp",
      "gamedev"
    ],
    "canonical_url": "https://dev.to/miguelmj/candle-a-2d-lighting-library-for-sfml-2e1f",
    "reading_time_minutes": 1,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    },
    "flare_tag": {
      "name": "showdev",
      "bg_color_hex": "#091b47",
      "text_color_hex": "#b2ffe1"
    }
  },
  {
    "type_of": "article",
    "id": 455090,
    "title": "Neon effect in text and SVG with CSS",
    "description": "I'm currently working in a website for my portfolio and when I found a colour palette I was comfortab...",
    "published": true,
    "published_at": "2020-09-13T18:23:20.485Z",
    "slug": "neon-effect-in-text-and-svg-with-css-3dap",
    "path": "/miguelmj/neon-effect-in-text-and-svg-with-css-3dap",
    "url": "https://dev.to/miguelmj/neon-effect-in-text-and-svg-with-css-3dap",
    "comments_count": 2,
    "public_reactions_count": 5,
    "page_views_count": 659,
    "published_timestamp": "2020-09-13T18:23:20Z",
    "body_markdown": "I'm currently working in a website for my portfolio and when I found a colour palette I was comfortable with, I bumped into a serious problem: the logo of one project blended with the background.\n\nOne approach to solve a problem like this is to add contour to highlight the image. Trying it out, I ended up with a really cool neon-like effect.\n\n![without effect](https://dev-to-uploads.s3.amazonaws.com/i/aqf5d0zezle4b371saak.png)\n*The logo without the effect*\n\n![with effect](https://dev-to-uploads.s3.amazonaws.com/i/gayz2ox7i1qjdhv0jv59.png)\n*The logo with the effect*\n\nThe CSS property used for this is the `filter` `drop-shadow`:\n```css\nimg{\n    filter: drop-shadow(0px 0px 3px #116466);\n}\n```\nWhere the parameters are `(x-off y-off blur color)`. Find more information [here](https://www.w3schools.com/CSSref/css3_pr_filter.asp).\n**Note that the image must have SVG format**. There are other ways to obtain a similar effect with a SVG image, but the advantage that this method have is that it will work even in external images, not only inline SVG.\n\nAlso, this works on text too! Here's an example.\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/vl7tnvu9qgvkxseszc12.png)\n*Text without effect*\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/6pafqr52ss5r4asnu9b5.png)\n*Text with effect*\n\nI hope you find it useful!",
    "positive_reactions_count": 5,
    "cover_image": null,
    "tag_list": [
      "css",
      "webdev",
      "html"
    ],
    "canonical_url": "https://dev.to/miguelmj/neon-effect-in-text-and-svg-with-css-3dap",
    "reading_time_minutes": 1,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 441398,
    "title": "Correctly escaping regular expressions",
    "description": "Regular expressions are often difficult to understand and even more difficult to write. Probably one...",
    "published": true,
    "published_at": "2020-08-30T11:40:45.019Z",
    "slug": "correctly-escaping-regular-expressions-27nc",
    "path": "/miguelmj/correctly-escaping-regular-expressions-27nc",
    "url": "https://dev.to/miguelmj/correctly-escaping-regular-expressions-27nc",
    "comments_count": 0,
    "public_reactions_count": 5,
    "page_views_count": 153,
    "published_timestamp": "2020-08-30T11:40:45Z",
    "body_markdown": "Regular expressions are often difficult to understand and even more difficult to write. Probably one of the most confusing topics when you're starting is the **escaping special characters**.\n\n### When and why we escape characters\nRegular expressions (_regex_ for short) are tools for matching patterns in text. There are some special characters with special meaning (their explanation is not the point of this post), and if we want to use those characters **without its special meaning**, we _escape_ them by putting a backslash (`\\`) before them. Note that this makes `\\` a special character too!\nA simple example: the regex to match _exactly_ `Count balance: 50$` will be `Count balance: 50\\$`.\nWhat happens with is that in most languages `\\` is a special character for strings! So the string to build the regex of the previous example would be: `Count balance: 50\\\\$`.\n\n### Tip to escape regex manually\nThink about the translation from match to regex to string, not from string to regex to match.\nWhat if we wanted to match `[ERR] $var has value \"gg\"`?\n1. _Match_: \n\n    `[ERR] $var has value \"gg\"`\n2. To _Regex_: `[`,`]`,`$` and `\"` are special characters in this regular expression. We escape them:\n \n    `\\[ERR\\] \\$var has value \\\"gg\\\"`\n3. To _String_: `\\` and `\"``are special characters in this string. We escape them:\n\n    `\\\\[ERR\\\\] \\\\$var has value \\\\\\\"gg\\\\\\\"`\n\nThe thing is to write down an example of what you want to match and escape step by step the special characters for the regex and for the string until you have the one that you must use in your program.\n\n### Escape them with functions\n_(Links to Stack Overflow answers)_\nAlso, another option is to escape (or quote) the regex with a utility function. Some languages, like [Python](https://stackoverflow.com/questions/4202538/escape-regex-special-characters-in-a-python-string) or [Java](https://stackoverflow.com/questions/60160/how-to-escape-text-for-regular-expression-in-java) provide them by standard. In others, like [JavaScript](https://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript) or [C++](https://stackoverflow.com/questions/39228912/stdregex-escape-backslashes-in-file-path), you must craft it yourself.\n**But beware!** Be sure to use this kind of functions with regex in which you don't want special characters, because if you're not careful, you can end up escaping something you shouldn't and messing up the regex.",
    "positive_reactions_count": 5,
    "cover_image": null,
    "tag_list": [
      "regex",
      "tips",
      "beginners"
    ],
    "canonical_url": "https://dev.to/miguelmj/correctly-escaping-regular-expressions-27nc",
    "reading_time_minutes": 2,
    "user": {
      "name": "MiguelMJ",
      "username": "miguelmj",
      "twitter_username": "MiguelMJdev",
      "github_username": "MiguelMJ",
      "website_url": "https://miguelmj.github.io/",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7So2Caoo--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--E9eJ0rxG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449565/879c7afb-d1ff-4692-b776-4b3d6f329bfd.jpg"
    }
  }
]